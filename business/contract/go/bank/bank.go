// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bank

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BankBetInfo is an auto generated low-level Go binding around an user-defined struct.
type BankBetInfo struct {
	State        uint8
	Participants []common.Address
	Moderator    common.Address
	AmountWei    *big.Int
	Expiration   *big.Int
}

// BankMetaData contains all meta data concerning the Bank contract.
var BankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"EventLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"BetDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"State\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"Participants\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Moderator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AmountWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Expiration\",\"type\":\"uint256\"}],\"internalType\":\"structBank.BetInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"CancelBetExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"CancelBetModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"}],\"name\":\"CancelBetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"CancelBetParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Drain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"PlaceBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"ReconcileBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614c7a806100606000396000f3fe6080604052600436106100dd5760003560e01c80637c64ce361161007f578063e2a06aca11610059578063e2a06aca1461026a578063e63f341f14610293578063ed21248c146102d0578063f8856b88146102da576100dd565b80637c64ce361461020c578063b4a99a4e14610235578063d67a073f14610260576100dd565b8063221da6a5116100bb578063221da6a51461015f57806330d0cee914610188578063364529e5146101c557806357ea89b614610202576100dd565b80630e302132146100e25780630ee216b71461010b5780630ef6788714610134575b600080fd5b3480156100ee57600080fd5b50610109600480360381019061010491906132e2565b610303565b005b34801561011757600080fd5b50610132600480360381019061012d91906133a2565b6108d4565b005b34801561014057600080fd5b50610149610b8b565b604051610156919061340d565b60405180910390f35b34801561016b57600080fd5b5061018660048036038101906101819190613541565b610bd5565b005b34801561019457600080fd5b506101af60048036038101906101aa9190613601565b6111e1565b6040516101bc919061340d565b60405180910390f35b3480156101d157600080fd5b506101ec60048036038101906101e7919061362e565b611286565b6040516101f991906137d6565b60405180910390f35b61020a6114a8565b005b34801561021857600080fd5b50610233600480360381019061022e91906137f8565b611643565b005b34801561024157600080fd5b5061024a611b72565b60405161025791906138ab565b60405180910390f35b610268611b96565b005b34801561027657600080fd5b50610291600480360381019061028c91906138c6565b611cab565b005b34801561029f57600080fd5b506102ba60048036038101906102b59190613601565b6124d4565b6040516102c7919061340d565b60405180910390f35b6102d8612579565b005b3480156102e657600080fd5b5061030160048036038101906102fc919061362e565b61267e565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035b57600080fd5b600060028660405161036d9190613a61565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff16146103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d190613ad5565b60405180910390fd5b8060000160040154421015610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041b90613b41565b60405180910390fd5b84600160008360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154146104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c690613bad565b60405180910390fd5b6000868260000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405160200161050d93929190613c06565b604051602081830303815290604052805190602001209050600080610533838888612941565b915091508060000151156105825780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105799190613c44565b60405180910390fd5b8360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90613cb2565b60405180910390fd5b8451846000016001018054905014610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b90613d1e565b60405180910390fd5b60005b855181101561072b5784600501600087838151811061068957610688613d3e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f90613db9565b60405180910390fd5b808061072390613e08565b915050610667565b5060005b85518110156107c55784600001600301546001600088848151811061075757610756613d3e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546107ab9190613e50565b9250508190555080806107bd90613e08565b91505061072f565b50600160008560000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600081548092919061084090613e08565b919050555060028460000160000160006101000a81548160ff021916908360ff160217905550600084600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a896040516020016108a59190613eaa565b6040516020818303038152906040526040516108c19190613c44565b60405180910390a1505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461092c57600080fd5b600060028360405161093e9190613a61565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff16146109ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a290613ad5565b60405180910390fd5b60008282600001600301546109c09190613ed0565b905060005b8260000160010180549050811015610b005781600160008560000160010184815481106109f5576109f4613d3e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610a6c9190613e50565b9250508190555083600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610ae69190613e50565b925050819055508080610af890613e08565b9150506109c5565b5060038260000160000160006101000a81548160ff021916908360ff160217905550600082600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a84604051602001610b619190613f2a565b604051602081830303815290604052604051610b7d9190613c44565b60405180910390a150505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c2d57600080fd5b6000600286604051610c3f9190613a61565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff1614610cac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca390613ad5565b60405180910390fd5b828290508160000160010180549050141580610cd357508351816000016001018054905014155b15610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a90613fc2565b60405180910390fd5b60005b8160000160010180549050811015610ffd576000826000016001018281548110610d4357610d42613d3e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000868381518110610d8557610d84613d3e565b5b60200260200101519050366000878786818110610da557610da4613d3e565b5b9050602002810190610db79190613ff1565b9150915082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414610e6857610e0d84612ada565b604051602001610e1d919061407a565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5f9190613c44565b60405180910390fd5b60008b8585604051602001610e7f93929190613c06565b604051602081830303815290604052805190602001209050600080610ea5838686612941565b91509150806000015115610ef45780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eeb9190613c44565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610f8b57610f3087612ada565b604051602001610f4091906140c6565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f829190613c44565b60405180910390fd5b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190610fde90613e08565b9190505550505050505050508080610ff590613e08565b915050610d16565b5060008582600001600301546110139190613ed0565b905060005b826000016001018054905081101561115357816001600085600001600101848154811061104857611047613d3e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546110bf9190613e50565b9250508190555086600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546111399190613e50565b92505081905550808061114b90613e08565b915050611018565b5060038260000160000160006101000a81548160ff021916908360ff160217905550600082600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a876040516020016111b4919061415e565b6040516020818303038152906040526040516111d09190613c44565b60405180910390a150505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461123c57600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b61128e612ec6565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112e657600080fd5b600060ff166002836040516112fb9190613a61565b908152602001604051809103902060000160000160009054906101000a900460ff1660ff1603611360576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611357906141cc565b60405180910390fd5b6002826040516113709190613a61565b90815260200160405180910390206000016040518060a00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561142e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116113e4575b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815250509050919050565b60003390506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060008103611537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152e90614238565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561157d573d6000803e3d6000fd5b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546115d09190613ed0565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a61160133612ada565b61160a83612c9d565b60405160200161161b9291906142ca565b6040516020818303038152906040526040516116379190613c44565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461169b57600080fd5b60006002866040516116ad9190613a61565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff161461171a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171190613ad5565b60405180910390fd5b83600160008360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154146117c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bc90613bad565b60405180910390fd5b6000868260000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660405160200161180393929190613c06565b604051602081830303815290604052805190602001209050600080611829838787612941565b915091508060000151156118785780602001516040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186f9190613c44565b60405180910390fd5b8360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461190d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190490613cb2565b60405180910390fd5b60008885600001600301546119229190613ed0565b905060005b8560000160010180549050811015611a6257816001600088600001600101848154811061195757611956613d3e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546119ce9190613e50565b9250508190555089600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611a489190613e50565b925050819055508080611a5a90613e08565b915050611927565b50600160008660000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190611add90613e08565b919050555060038560000160000160006101000a81548160ff021916908360ff160217905550600085600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a604051602001611b429190614341565b604051602081830303815290604052604051611b5e9190613c44565b60405180910390a150505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bee57600080fd5b600033905060004790508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611c3e573d6000803e3d6000fd5b507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611c6983612ada565b611c7283612c9d565b604051602001611c8392919061438d565b604051602081830303815290604052604051611c9f9190613c44565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d0357600080fd5b600060ff1660028a604051611d189190613a61565b908152602001604051809103902060000160000160009054906101000a900460ff1660ff1614611d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d749061442a565b60405180910390fd5b60008789611d8b9190613e50565b905060005b855181101561209b576000868281518110611dae57611dad613d3e565b5b602002602001015190506000868381518110611dcd57611dcc613d3e565b5b60200260200101519050366000878786818110611ded57611dec613d3e565b5b9050602002810190611dff9190613ff1565b9150915085600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015611eb157611e5684612ada565b604051602001611e669190614470565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea89190613c44565b60405180910390fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414611f5e57611f0384612ada565b604051602001611f1391906144bc565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f559190613c44565b60405180910390fd5b60008f8585604051602001611f7593929190613c06565b604051602081830303815290604052805190602001209050600080611f9b838686612941565b91509150806000015115611fea5780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe19190613c44565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146120815761202687612ada565b60405160200161203691906140c6565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120789190613c44565b60405180910390fd5b50505050505050808061209390613e08565b915050611d90565b506040518060a00160405280600160ff1681526020018681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001898b6120df9190613ed0565b81526020018881525060028b6040516120f89190613a61565b908152602001604051809103902060000160008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001019080519060200190612146929190612f0e565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015590505060005b85518110156123865760008682815181106121c6576121c5613d3e565b5b6020026020010151905082600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546122229190613ed0565b92505081905550600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600081548092919061227c90613e08565b919050555089600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546122f49190613e50565b92505081905550600160028d60405161230d9190613a61565b908152602001604051809103902060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050808061237e90613e08565b9150506121a8565b50600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16612472576040518060600160405280600115158152602001600081526020016000815250600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201559050505b7fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a6040516020016124a49190614508565b6040516020818303038152906040526040516124c09190613c44565b60405180910390a150505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461252f57600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546125cb9190613e50565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6125fc33612ada565b612647600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612c9d565b60405160200161265892919061457a565b6040516020818303038152906040526040516126749190613c44565b60405180910390a1565b60006002826040516126909190613a61565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff16146126fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f490613ad5565b60405180910390fd5b62278d0081600001600401546127139190613e50565b421015612755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274c9061463d565b60405180910390fd5b8060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166127e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127da906146cf565b60405180910390fd5b60005b81600001600101805490508110156128ae5781600001600301546001600084600001600101848154811061281d5761281c613d3e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546128949190613e50565b9250508190555080806128a690613e08565b9150506127e6565b5060038160000160000160006101000a81548160ff021916908360ff160217905550600081600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8261290833612ada565b60405160200161291992919061473b565b6040516020818303038152906040526040516129359190613c44565b60405180910390a15050565b600061294b612f98565b6041848490501461299f5760006129966040518060400160405280601881526020017f696e76616c6964207369676e6174757265206c656e6774680000000000000000815250612e25565b91509150612ad2565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081876040516020016129ee9291906147ef565b60405160208183030381529060405280519060200120905060008686600090602092612a1c93929190614821565b90612a279190614874565b905060008787602090604092612a3f93929190614821565b90612a4a9190614874565b9050600088886040818110612a6257612a61613d3e565b5b9050013560f81c60f81b60f81c905060018482858560405160008152602001604052604051612a9494939291906148f1565b6020604051602081039080840390855afa158015612ab6573d6000803e3d6000fd5b50505060206040510351612ac8612e4c565b9650965050505050505b935093915050565b60606000602867ffffffffffffffff811115612af957612af8613000565b5b6040519080825280601f01601f191660200182016040528015612b2b5781602001600182028036833780820191505090505b50905060005b6014811015612c93576000816013612b499190613ed0565b6008612b559190614936565b6002612b619190614ac3565b8573ffffffffffffffffffffffffffffffffffffffff16612b829190614b3d565b60f81b9050600060108260f81c612b999190614b6e565b60f81b905060008160f81c6010612bb09190614b9f565b8360f81c612bbe9190614bda565b60f81b9050612bcc82612e80565b85856002612bda9190614936565b81518110612beb57612bea613d3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612c2381612e80565b856001866002612c339190614936565b612c3d9190613e50565b81518110612c4e57612c4d613d3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080612c8b90613e08565b915050612b31565b5080915050919050565b606060008203612ce4576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612e20565b600082905060005b60008214612d16578080612cff90613e08565b915050600a82612d0f9190614b3d565b9150612cec565b60008167ffffffffffffffff811115612d3257612d31613000565b5b6040519080825280601f01601f191660200182016040528015612d645781602001600182028036833780820191505090505b50905060008290505b60008614612e1857600181612d829190613ed0565b90506000600a8088612d949190614b3d565b612d9e9190614936565b87612da99190613ed0565b6030612db59190614c0f565b905060008160f81b905080848481518110612dd357612dd2613d3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88612e0f9190614b3d565b97505050612d6d565b819450505050505b919050565b612e2d612f98565b6040518060400160405280600115158152602001838152509050919050565b612e54612f98565b604051806040016040528060001515815260200160405180602001604052806000815250815250905090565b6000600a8260f81c60ff161015612eab5760308260f81c612ea19190614c0f565b60f81b9050612ec1565b60578260f81c612ebb9190614c0f565b60f81b90505b919050565b6040518060a00160405280600060ff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b828054828255906000526020600020908101928215612f87579160200282015b82811115612f865782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612f2e565b5b509050612f949190612fb4565b5090565b6040518060400160405280600015158152602001606081525090565b5b80821115612fcd576000816000905550600101612fb5565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61303882612fef565b810181811067ffffffffffffffff8211171561305757613056613000565b5b80604052505050565b600061306a612fd1565b9050613076828261302f565b919050565b600067ffffffffffffffff82111561309657613095613000565b5b61309f82612fef565b9050602081019050919050565b82818337600083830152505050565b60006130ce6130c98461307b565b613060565b9050828152602081018484840111156130ea576130e9612fea565b5b6130f58482856130ac565b509392505050565b600082601f83011261311257613111612fe5565b5b81356131228482602086016130bb565b91505092915050565b6000819050919050565b61313e8161312b565b811461314957600080fd5b50565b60008135905061315b81613135565b92915050565b600080fd5b600080fd5b60008083601f84011261318157613180612fe5565b5b8235905067ffffffffffffffff81111561319e5761319d613161565b5b6020830191508360018202830111156131ba576131b9613166565b5b9250929050565b600067ffffffffffffffff8211156131dc576131db613000565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613218826131ed565b9050919050565b6132288161320d565b811461323357600080fd5b50565b6000813590506132458161321f565b92915050565b600061325e613259846131c1565b613060565b9050808382526020820190506020840283018581111561328157613280613166565b5b835b818110156132aa57806132968882613236565b845260208401935050602081019050613283565b5050509392505050565b600082601f8301126132c9576132c8612fe5565b5b81356132d984826020860161324b565b91505092915050565b6000806000806000608086880312156132fe576132fd612fdb565b5b600086013567ffffffffffffffff81111561331c5761331b612fe0565b5b613328888289016130fd565b95505060206133398882890161314c565b945050604086013567ffffffffffffffff81111561335a57613359612fe0565b5b6133668882890161316b565b9350935050606086013567ffffffffffffffff81111561338957613388612fe0565b5b613395888289016132b4565b9150509295509295909350565b600080604083850312156133b9576133b8612fdb565b5b600083013567ffffffffffffffff8111156133d7576133d6612fe0565b5b6133e3858286016130fd565b92505060206133f48582860161314c565b9150509250929050565b6134078161312b565b82525050565b600060208201905061342260008301846133fe565b92915050565b600067ffffffffffffffff82111561344357613442613000565b5b602082029050602081019050919050565b600061346761346284613428565b613060565b9050808382526020820190506020840283018581111561348a57613489613166565b5b835b818110156134b3578061349f888261314c565b84526020840193505060208101905061348c565b5050509392505050565b600082601f8301126134d2576134d1612fe5565b5b81356134e2848260208601613454565b91505092915050565b60008083601f84011261350157613500612fe5565b5b8235905067ffffffffffffffff81111561351e5761351d613161565b5b60208301915083602082028301111561353a57613539613166565b5b9250929050565b60008060008060006080868803121561355d5761355c612fdb565b5b600086013567ffffffffffffffff81111561357b5761357a612fe0565b5b613587888289016130fd565b95505060206135988882890161314c565b945050604086013567ffffffffffffffff8111156135b9576135b8612fe0565b5b6135c5888289016134bd565b935050606086013567ffffffffffffffff8111156135e6576135e5612fe0565b5b6135f2888289016134eb565b92509250509295509295909350565b60006020828403121561361757613616612fdb565b5b600061362584828501613236565b91505092915050565b60006020828403121561364457613643612fdb565b5b600082013567ffffffffffffffff81111561366257613661612fe0565b5b61366e848285016130fd565b91505092915050565b600060ff82169050919050565b61368d81613677565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6136c88161320d565b82525050565b60006136da83836136bf565b60208301905092915050565b6000602082019050919050565b60006136fe82613693565b613708818561369e565b9350613713836136af565b8060005b8381101561374457815161372b88826136ce565b9750613736836136e6565b925050600181019050613717565b5085935050505092915050565b61375a8161312b565b82525050565b600060a0830160008301516137786000860182613684565b506020830151848203602086015261379082826136f3565b91505060408301516137a560408601826136bf565b5060608301516137b86060860182613751565b5060808301516137cb6080860182613751565b508091505092915050565b600060208201905081810360008301526137f08184613760565b905092915050565b60008060008060006080868803121561381457613813612fdb565b5b600086013567ffffffffffffffff81111561383257613831612fe0565b5b61383e888289016130fd565b955050602061384f8882890161314c565b94505060406138608882890161314c565b935050606086013567ffffffffffffffff81111561388157613880612fe0565b5b61388d8882890161316b565b92509250509295509295909350565b6138a58161320d565b82525050565b60006020820190506138c0600083018461389c565b92915050565b60008060008060008060008060006101008a8c0312156138e9576138e8612fdb565b5b60008a013567ffffffffffffffff81111561390757613906612fe0565b5b6139138c828d016130fd565b99505060206139248c828d0161314c565b98505060406139358c828d0161314c565b97505060606139468c828d0161314c565b96505060806139578c828d01613236565b95505060a08a013567ffffffffffffffff81111561397857613977612fe0565b5b6139848c828d016132b4565b94505060c08a013567ffffffffffffffff8111156139a5576139a4612fe0565b5b6139b18c828d016134bd565b93505060e08a013567ffffffffffffffff8111156139d2576139d1612fe0565b5b6139de8c828d016134eb565b92509250509295985092959850929598565b600081519050919050565b600081905092915050565b60005b83811015613a24578082015181840152602081019050613a09565b60008484015250505050565b6000613a3b826139f0565b613a4581856139fb565b9350613a55818560208601613a06565b80840191505092915050565b6000613a6d8284613a30565b915081905092915050565b600082825260208201905092915050565b7f626574206973206e6f74206c6976650000000000000000000000000000000000600082015250565b6000613abf600f83613a78565b9150613aca82613a89565b602082019050919050565b60006020820190508181036000830152613aee81613ab2565b9050919050565b7f62657420686173206e6f74207965742065787069726564000000000000000000600082015250565b6000613b2b601783613a78565b9150613b3682613af5565b602082019050919050565b60006020820190508181036000830152613b5a81613b1e565b9050919050565b7f696e76616c6964206d6f64657261746f72206e6f6e6365000000000000000000600082015250565b6000613b97601783613a78565b9150613ba282613b61565b602082019050919050565b60006020820190508181036000830152613bc681613b8a565b9050919050565b6000613bd8826139f0565b613be28185613a78565b9350613bf2818560208601613a06565b613bfb81612fef565b840191505092915050565b60006060820190508181036000830152613c208186613bcd565b9050613c2f602083018561389c565b613c3c60408301846133fe565b949350505050565b60006020820190508181036000830152613c5e8184613bcd565b905092915050565b7f696e76616c6964206d6f64657261746f72207369676e61747572650000000000600082015250565b6000613c9c601b83613a78565b9150613ca782613c66565b602082019050919050565b60006020820190508181036000830152613ccb81613c8f565b9050919050565b7f696e76616c6964206e756d626572206f662077696e6e65727300000000000000600082015250565b6000613d08601983613a78565b9150613d1382613cd2565b602082019050919050565b60006020820190508181036000830152613d3781613cfb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e76616c69642077696e6e6572000000000000000000000000000000000000600082015250565b6000613da3600e83613a78565b9150613dae82613d6d565b602082019050919050565b60006020820190508181036000830152613dd281613d96565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e138261312b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613e4557613e44613dd9565b5b600182019050919050565b6000613e5b8261312b565b9150613e668361312b565b9250828201905080821115613e7e57613e7d613dd9565b5b92915050565b7f20686173206265656e207265636f6e63696c6564000000000000000000000000815250565b6000613eb68284613a30565b9150613ec182613e84565b60148201915081905092915050565b6000613edb8261312b565b9150613ee68361312b565b9250828203905081811115613efe57613efd613dd9565b5b92915050565b7f20686173206265656e2063616e63656c6c6564206279206f776e657200000000815250565b6000613f368284613a30565b9150613f4182613f04565b601c8201915081905092915050565b7f696e76616c6964206e756d626572206f66207369676e617475726573206f722060008201527f6e6f6e6365730000000000000000000000000000000000000000000000000000602082015250565b6000613fac602683613a78565b9150613fb782613f50565b604082019050919050565b60006020820190508181036000830152613fdb81613f9f565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261400e5761400d613fe2565b5b80840192508235915067ffffffffffffffff8211156140305761402f613fe7565b5b60208301925060018202360383131561404c5761404b613fec565b5b509250929050565b7f5d2068617320616e20696e76616c6964206e6f6e636500000000000000000000815250565b60006140868284613a30565b915061409182614054565b60168201915081905092915050565b7f206164647265737320646f65736e2774206d61746368207369676e6174757265815250565b60006140d28284613a30565b91506140dd826140a0565b60208201915081905092915050565b7f20686173206265656e2063616e63656c6c656420627920616c6c20706172746960008201527f636970616e747300000000000000000000000000000000000000000000000000602082015250565b60006141486027836139fb565b9150614153826140ec565b602782019050919050565b600061416a8284613a30565b91506141758261413b565b915081905092915050565b7f62657420696420646f6573206e6f742065786973740000000000000000000000600082015250565b60006141b6601583613a78565b91506141c182614180565b602082019050919050565b600060208201905081810360008301526141e5816141a9565b9050919050565b7f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b6000614222601283613a78565b915061422d826141ec565b602082019050919050565b6000602082019050818103600083015261425181614215565b9050919050565b7f77697468647261775b0000000000000000000000000000000000000000000000815250565b7f5d20616d6f756e745b0000000000000000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b60006142d582614258565b6009820191506142e58285613a30565b91506142f08261427e565b6009820191506143008284613a30565b915061430b826142a4565b6001820191508190509392505050565b7f20686173206265656e2063616e63656c6c6564206279206d6f64657261746f72815250565b600061434d8284613a30565b91506143588261431b565b60208201915081905092915050565b7f647261696e5b0000000000000000000000000000000000000000000000000000815250565b600061439882614367565b6006820191506143a88285613a30565b91506143b38261427e565b6009820191506143c38284613a30565b91506143ce826142a4565b6001820191508190509392505050565b7f62657420696420616c7265616479206578697374730000000000000000000000600082015250565b6000614414601583613a78565b915061441f826143de565b602082019050919050565b6000602082019050818103600083015261444381614407565b9050919050565b7f2068617320616e20696e73756666696369656e742062616c616e636500000000815250565b600061447c8284613a30565b91506144878261444a565b601c8201915081905092915050565b7f2068617320616e20696e76616c6964206e6f6e63650000000000000000000000815250565b60006144c88284613a30565b91506144d382614496565b60158201915081905092915050565b7f20686173206265656e20616464656420746f207468652073797374656d000000815250565b60006145148284613a30565b915061451f826144e2565b601d8201915081905092915050565b7f6465706f7369745b000000000000000000000000000000000000000000000000815250565b7f5d2062616c616e63655b00000000000000000000000000000000000000000000815250565b60006145858261452e565b6008820191506145958285613a30565b91506145a082614554565b600a820191506145b08284613a30565b91506145bb826142a4565b6001820191508190509392505050565b7f62657473206d6179206f6e6c792062652063616e63656c65642033302b20646160008201527f79732061667465722065787069726174696f6e00000000000000000000000000602082015250565b6000614627603383613a78565b9150614632826145cb565b604082019050919050565b600060208201905081810360008301526146568161461a565b9050919050565b7f63616e63656c6572206973206e6f7420617574686f72697a656420746f20636160008201527f6e63656c20746869732062657400000000000000000000000000000000000000602082015250565b60006146b9602d83613a78565b91506146c48261465d565b604082019050919050565b600060208201905081810360008301526146e8816146ac565b9050919050565b7f20686173206265656e2063616e63656c6c656420627920000000000000000000815250565b7f2073696e63652065787069726564000000000000000000000000000000000000815250565b60006147478285613a30565b9150614752826146ef565b6017820191506147628284613a30565b915061476d82614715565b600e820191508190509392505050565b600081519050919050565b600081905092915050565b600061479e8261477d565b6147a88185614788565b93506147b8818560208601613a06565b80840191505092915050565b6000819050919050565b6000819050919050565b6147e96147e4826147c4565b6147ce565b82525050565b60006147fb8285614793565b915061480782846147d8565b6020820191508190509392505050565b600080fd5b600080fd5b6000808585111561483557614834614817565b5b838611156148465761484561481c565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b6000614880838361485c565b8261488b81356147c4565b925060208210156148cb576148c67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802614867565b831692505b505092915050565b6148dc816147c4565b82525050565b6148eb81613677565b82525050565b600060808201905061490660008301876148d3565b61491360208301866148e2565b61492060408301856148d3565b61492d60608301846148d3565b95945050505050565b60006149418261312b565b915061494c8361312b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561498557614984613dd9565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b60018511156149e7578086048111156149c3576149c2613dd9565b5b60018516156149d25780820291505b80810290506149e085614990565b94506149a7565b94509492505050565b600082614a005760019050614abc565b81614a0e5760009050614abc565b8160018114614a245760028114614a2e57614a5d565b6001915050614abc565b60ff841115614a4057614a3f613dd9565b5b8360020a915084821115614a5757614a56613dd9565b5b50614abc565b5060208310610133831016604e8410600b8410161715614a925782820a905083811115614a8d57614a8c613dd9565b5b614abc565b614a9f848484600161499d565b92509050818404811115614ab657614ab5613dd9565b5b81810290505b9392505050565b6000614ace8261312b565b9150614ad98361312b565b9250614b067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846149f0565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614b488261312b565b9150614b538361312b565b925082614b6357614b62614b0e565b5b828204905092915050565b6000614b7982613677565b9150614b8483613677565b925082614b9457614b93614b0e565b5b828204905092915050565b6000614baa82613677565b9150614bb583613677565b92508160ff0483118215151615614bcf57614bce613dd9565b5b828202905092915050565b6000614be582613677565b9150614bf083613677565b9250828203905060ff811115614c0957614c08613dd9565b5b92915050565b6000614c1a82613677565b9150614c2583613677565b9250828201905060ff811115614c3e57614c3d613dd9565b5b9291505056fea2646970667358221220573d9217a5be869dc109ab9073e9ca898936243d8d117573696cf46b7789e97e64736f6c63430008100033",
}

// BankABI is the input ABI used to generate the binding from.
// Deprecated: Use BankMetaData.ABI instead.
var BankABI = BankMetaData.ABI

// BankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BankMetaData.Bin instead.
var BankBin = BankMetaData.Bin

// DeployBank deploys a new Ethereum contract, binding an instance of Bank to it.
func DeployBank(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bank, error) {
	parsed, err := BankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BankBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bank{BankCaller: BankCaller{contract: contract}, BankTransactor: BankTransactor{contract: contract}, BankFilterer: BankFilterer{contract: contract}}, nil
}

// Bank is an auto generated Go binding around an Ethereum contract.
type Bank struct {
	BankCaller     // Read-only binding to the contract
	BankTransactor // Write-only binding to the contract
	BankFilterer   // Log filterer for contract events
}

// BankCaller is an auto generated read-only Go binding around an Ethereum contract.
type BankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BankSession struct {
	Contract     *Bank             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BankCallerSession struct {
	Contract *BankCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BankTransactorSession struct {
	Contract     *BankTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BankRaw is an auto generated low-level Go binding around an Ethereum contract.
type BankRaw struct {
	Contract *Bank // Generic contract binding to access the raw methods on
}

// BankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BankCallerRaw struct {
	Contract *BankCaller // Generic read-only contract binding to access the raw methods on
}

// BankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BankTransactorRaw struct {
	Contract *BankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBank creates a new instance of Bank, bound to a specific deployed contract.
func NewBank(address common.Address, backend bind.ContractBackend) (*Bank, error) {
	contract, err := bindBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bank{BankCaller: BankCaller{contract: contract}, BankTransactor: BankTransactor{contract: contract}, BankFilterer: BankFilterer{contract: contract}}, nil
}

// NewBankCaller creates a new read-only instance of Bank, bound to a specific deployed contract.
func NewBankCaller(address common.Address, caller bind.ContractCaller) (*BankCaller, error) {
	contract, err := bindBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BankCaller{contract: contract}, nil
}

// NewBankTransactor creates a new write-only instance of Bank, bound to a specific deployed contract.
func NewBankTransactor(address common.Address, transactor bind.ContractTransactor) (*BankTransactor, error) {
	contract, err := bindBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BankTransactor{contract: contract}, nil
}

// NewBankFilterer creates a new log filterer instance of Bank, bound to a specific deployed contract.
func NewBankFilterer(address common.Address, filterer bind.ContractFilterer) (*BankFilterer, error) {
	contract, err := bindBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BankFilterer{contract: contract}, nil
}

// bindBank binds a generic wrapper to an already deployed contract.
func bindBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bank *BankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bank.Contract.BankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bank *BankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.Contract.BankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bank *BankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bank.Contract.BankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bank *BankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bank *BankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bank *BankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bank.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "AccountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Bank.Contract.AccountBalance(&_Bank.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Bank.Contract.AccountBalance(&_Bank.CallOpts, account)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankCaller) Balance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Balance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankSession) Balance() (*big.Int, error) {
	return _Bank.Contract.Balance(&_Bank.CallOpts)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankCallerSession) Balance() (*big.Int, error) {
	return _Bank.Contract.Balance(&_Bank.CallOpts)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Bank *BankCaller) BetDetails(opts *bind.CallOpts, betID string) (BankBetInfo, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "BetDetails", betID)

	if err != nil {
		return *new(BankBetInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(BankBetInfo)).(*BankBetInfo)

	return out0, err

}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Bank *BankSession) BetDetails(betID string) (BankBetInfo, error) {
	return _Bank.Contract.BetDetails(&_Bank.CallOpts, betID)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Bank *BankCallerSession) BetDetails(betID string) (BankBetInfo, error) {
	return _Bank.Contract.BetDetails(&_Bank.CallOpts, betID)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Bank *BankCaller) Nonce(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Nonce", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Bank *BankSession) Nonce(account common.Address) (*big.Int, error) {
	return _Bank.Contract.Nonce(&_Bank.CallOpts, account)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Bank *BankCallerSession) Nonce(account common.Address) (*big.Int, error) {
	return _Bank.Contract.Nonce(&_Bank.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankSession) Owner() (common.Address, error) {
	return _Bank.Contract.Owner(&_Bank.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankCallerSession) Owner() (common.Address, error) {
	return _Bank.Contract.Owner(&_Bank.CallOpts)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Bank *BankTransactor) CancelBetExpired(opts *bind.TransactOpts, betID string) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "CancelBetExpired", betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Bank *BankSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetExpired(&_Bank.TransactOpts, betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Bank *BankTransactorSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetExpired(&_Bank.TransactOpts, betID)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeWei, uint256 nonce, bytes signature) returns()
func (_Bank *BankTransactor) CancelBetModerator(opts *bind.TransactOpts, betID string, feeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "CancelBetModerator", betID, feeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeWei, uint256 nonce, bytes signature) returns()
func (_Bank *BankSession) CancelBetModerator(betID string, feeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetModerator(&_Bank.TransactOpts, betID, feeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeWei, uint256 nonce, bytes signature) returns()
func (_Bank *BankTransactorSession) CancelBetModerator(betID string, feeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetModerator(&_Bank.TransactOpts, betID, feeWei, nonce, signature)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeWei) returns()
func (_Bank *BankTransactor) CancelBetOwner(opts *bind.TransactOpts, betID string, feeWei *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "CancelBetOwner", betID, feeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeWei) returns()
func (_Bank *BankSession) CancelBetOwner(betID string, feeWei *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetOwner(&_Bank.TransactOpts, betID, feeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeWei) returns()
func (_Bank *BankTransactorSession) CancelBetOwner(betID string, feeWei *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetOwner(&_Bank.TransactOpts, betID, feeWei)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankTransactor) CancelBetParticipants(opts *bind.TransactOpts, betID string, feeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "CancelBetParticipants", betID, feeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankSession) CancelBetParticipants(betID string, feeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetParticipants(&_Bank.TransactOpts, betID, feeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankTransactorSession) CancelBetParticipants(betID string, feeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetParticipants(&_Bank.TransactOpts, betID, feeWei, nonces, signatures)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankSession) Deposit() (*types.Transaction, error) {
	return _Bank.Contract.Deposit(&_Bank.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankTransactorSession) Deposit() (*types.Transaction, error) {
	return _Bank.Contract.Deposit(&_Bank.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Bank *BankTransactor) Drain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Drain")
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Bank *BankSession) Drain() (*types.Transaction, error) {
	return _Bank.Contract.Drain(&_Bank.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Bank *BankTransactorSession) Drain() (*types.Transaction, error) {
	return _Bank.Contract.Drain(&_Bank.TransactOpts)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountWei, uint256 feeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankTransactor) PlaceBet(opts *bind.TransactOpts, betID string, amountWei *big.Int, feeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "PlaceBet", betID, amountWei, feeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountWei, uint256 feeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankSession) PlaceBet(betID string, amountWei *big.Int, feeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.Contract.PlaceBet(&_Bank.TransactOpts, betID, amountWei, feeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountWei, uint256 feeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankTransactorSession) PlaceBet(betID string, amountWei *big.Int, feeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.Contract.PlaceBet(&_Bank.TransactOpts, betID, amountWei, feeWei, expiration, moderator, participants, nonces, signatures)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Bank *BankTransactor) ReconcileBet(opts *bind.TransactOpts, betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "ReconcileBet", betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Bank *BankSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Bank.Contract.ReconcileBet(&_Bank.TransactOpts, betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Bank *BankTransactorSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Bank.Contract.ReconcileBet(&_Bank.TransactOpts, betID, nonce, signature, winners)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankSession) Withdraw() (*types.Transaction, error) {
	return _Bank.Contract.Withdraw(&_Bank.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Bank.Contract.Withdraw(&_Bank.TransactOpts)
}

// BankEventLogIterator is returned from FilterEventLog and is used to iterate over the raw logs and unpacked data for EventLog events raised by the Bank contract.
type BankEventLogIterator struct {
	Event *BankEventLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BankEventLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BankEventLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BankEventLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BankEventLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BankEventLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BankEventLog represents a EventLog event raised by the Bank contract.
type BankEventLog struct {
	Value string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEventLog is a free log retrieval operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) FilterEventLog(opts *bind.FilterOpts) (*BankEventLogIterator, error) {

	logs, sub, err := _Bank.contract.FilterLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return &BankEventLogIterator{contract: _Bank.contract, event: "EventLog", logs: logs, sub: sub}, nil
}

// WatchEventLog is a free log subscription operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) WatchEventLog(opts *bind.WatchOpts, sink chan<- *BankEventLog) (event.Subscription, error) {

	logs, sub, err := _Bank.contract.WatchLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BankEventLog)
				if err := _Bank.contract.UnpackLog(event, "EventLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventLog is a log parse operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) ParseEventLog(log types.Log) (*BankEventLog, error) {
	event := new(BankEventLog)
	if err := _Bank.contract.UnpackLog(event, "EventLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
