// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bank

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BankMetaData contains all meta data concerning the Bank contract.
var BankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"EventLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonce\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"AbortBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"CancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Drain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"ModeratorCancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nonce\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"PlaceBetsSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"ReconcileSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614231806100606000396000f3fe60806040526004361061009c5760003560e01c80637579b65f116100645780637579b65f1461015157806382f35cd21461017a57806393f28237146101a3578063b4a99a4e146101bf578063e63f341f146101ea578063ed21248c146102275761009c565b80630ef67887146100a1578063214bcc4d146100cc57806347712304146100f557806357ea89b61461011e5780636329dd9a14610128575b600080fd5b3480156100ad57600080fd5b506100b6610231565b6040516100c391906124b0565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190612a2f565b610278565b005b34801561010157600080fd5b5061011c60048036038101906101179190612b79565b61087f565b005b610126610c99565b005b34801561013457600080fd5b5061014f600480360381019061014a9190612c67565b610e2e565b005b34801561015d57600080fd5b5061017860048036038101906101739190612d2c565b6112ee565b005b34801561018657600080fd5b506101a1600480360381019061019c9190612e06565b61180d565b005b6101bd60048036038101906101b89190612f8d565b611d3f565b005b3480156101cb57600080fd5b506101d4611e4b565b6040516101e19190612fc9565b60405180910390f35b3480156101f657600080fd5b50610211600480360381019061020c9190612f8d565b611e6f565b60405161021e91906124b0565b60405180910390f35b61022f611f11565b005b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d057600080fd5b806002886040516102e19190613055565b9081526020016040518091039020600301541015610334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032b906130c9565b60405180910390fd5b60006002886040516103469190613055565b9081526020016040518091039020600301541115610399576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103909061315b565b60405180910390fd5b85516002886040516103ab9190613055565b908152602001604051809103902060010154146103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f4906131c7565b60405180910390fd5b60005b86518110156104e1576002886040516104199190613055565b9081526020016040518091039020600001600088838151811061043f5761043e6131e7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590613262565b60405180910390fd5b80806104d9906132b1565b915050610400565b5084516002886040516104f49190613055565b90815260200160405180910390206001015414610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d9061336b565b60405180910390fd5b60005b85518110156106dc576000610579898989858151811061056c5761056b6131e7565b5b6020026020010151612010565b90506000600182888581518110610593576105926131e7565b5b60200260200101518886815181106105ae576105ad6131e7565b5b60200260200101518887815181106105c9576105c86131e7565b5b6020026020010151604051600081526020016040526040516105ee94939291906133a9565b6020604051602081039080840390855afa158015610610573d6000803e3d6000fd5b50505060206040510351905060028a60405161062c9190613055565b908152602001604051809103902060000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be9061343a565b60405180910390fd5b505080806106d4906132b1565b915050610549565b50806002886040516106ee9190613055565b9081526020016040518091039020600301600082825461070e919061345a565b9250508190555080600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610785919061348e565b92505081905550600086516002896040516107a09190613055565b9081526020016040518091039020600301546107bc91906134f1565b905060005b875181101561084d5781600160008a84815181106107e2576107e16131e7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610833919061348e565b925050819055508080610845906132b1565b9150506107c1565b5060006002896040516108609190613055565b9081526020016040518091039020600301819055505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d757600080fd5b6002886040516108e79190613055565b90815260200160405180910390206004015442101561093b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109329061356e565b60405180910390fd5b60006109498989898961204e565b905060006001828787876040516000815260200160405260405161097094939291906133a9565b6020604051602081039080840390855afa158015610992573d6000803e3d6000fd5b5050506020604051035190508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a03906135da565b60405180910390fd5b8260028b604051610a1d9190613055565b9081526020016040518091039020600301541015610a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a67906130c9565b60405180910390fd5b8260028b604051610a819190613055565b90815260200160405180910390206003016000828254610aa1919061345a565b9250508190555082600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b18919061348e565b925050819055506000895160028c604051610b339190613055565b908152602001604051809103902060030154610b4f91906134f1565b905060005b8a51811015610c645781600160008d8481518110610b7557610b746131e7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bc6919061348e565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8c610c128d8481518110610c0557610c046131e7565b5b602002602001015161208f565b610c1b85612252565b604051602001610c2d93929190613692565b604051602081830303815290604052604051610c499190613738565b60405180910390a18080610c5c906132b1565b915050610b54565b50600060028c604051610c779190613055565b9081526020016040518091039020600301819055505050505050505050505050565b60003390506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1c906137a6565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d6b573d6000803e3d6000fd5b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dbb919061345a565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a610dec3361208f565b610df583612252565b604051602001610e06929190613812565b604051602081830303815290604052604051610e229190613738565b60405180910390a15050565b62278d00600287604051610e429190613055565b908152602001604051809103902060040154610e5e919061348e565b421015610ea0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e97906138d5565b60405180910390fd5b6000600287604051610eb29190613055565b9081526020016040518091039020600301541115610f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efc9061315b565b60405180910390fd5b8451600287604051610f179190613055565b90815260200160405180910390206001015414610f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f60906131c7565b60405180910390fd5b60005b855181101561104d57600287604051610f859190613055565b90815260200160405180910390206000016000878381518110610fab57610faa6131e7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103190613262565b60405180910390fd5b8080611045906132b1565b915050610f6c565b50600061105b878787612010565b905060006001828686866040516000815260200160405260405161108294939291906133a9565b6020604051602081039080840390855afa1580156110a4573d6000803e3d6000fd5b5050506020604051035190506002886040516110c09190613055565b908152602001604051809103902060000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661115b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115290613967565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c0906139f9565b60405180910390fd5b60006002896040516111db9190613055565b90815260200160405180910390206001015460028a6040516111fd9190613055565b90815260200160405180910390206003015461121991906134f1565b905060005b88518110156112e25781600160008b848151811061123f5761123e6131e7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611290919061348e565b925050819055508160028b6040516112a89190613055565b908152602001604051809103902060030160008282546112c8919061345a565b9250508190555080806112da906132b1565b91505061121e565b50505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461134657600080fd5b806002886040516113579190613055565b90815260200160405180910390206003015410156113aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a1906130c9565b60405180910390fd5b60006002886040516113bc9190613055565b908152602001604051809103902060030154111561140f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114069061315b565b60405180910390fd5b600061141c888888612010565b905060006001828787876040516000815260200160405260405161144394939291906133a9565b6020604051602081039080840390855afa158015611465573d6000803e3d6000fd5b5050506020604051035190506002896040516114819190613055565b908152602001604051809103902060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151790613a8b565b60405180910390fd5b875160028a6040516115329190613055565b90815260200160405180910390206001015414611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b906131c7565b60405180910390fd5b60005b88518110156116685760028a6040516115a09190613055565b908152602001604051809103902060000160008a83815181106115c6576115c56131e7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164c90613262565b60405180910390fd5b8080611660906132b1565b915050611587565b508260028a60405161167a9190613055565b9081526020016040518091039020600301600082825461169a919061345a565b9250508190555082600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611711919061348e565b925050819055506000885160028b60405161172c9190613055565b90815260200160405180910390206003015461174891906134f1565b905060005b89518110156117d95781600160008c848151811061176e5761176d6131e7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117bf919061348e565b9250508190555080806117d1906132b1565b91505061174d565b50600060028b6040516117ec9190613055565b90815260200160405180910390206003018190555050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461186557600080fd5b885160028b6040516118779190613055565b9081526020016040518091039020600101819055508760028b60405161189d9190613055565b908152602001604051809103902060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560028b6040516118fd9190613055565b908152602001604051809103902060040181905550600089518261192191906134f1565b905060005b8a51811015611d315760006119738d8d8481518110611948576119476131e7565b5b60200260200101518d8d8d8d8881518110611966576119656131e7565b5b60200260200101516123da565b9050600060018289858151811061198d5761198c6131e7565b5b60200260200101518986815181106119a8576119a76131e7565b5b60200260200101518987815181106119c3576119c26131e7565b5b6020026020010151604051600081526020016040526040516119e894939291906133a9565b6020604051602081039080840390855afa158015611a0a573d6000803e3d6000fd5b5050506020604051035190508c8381518110611a2957611a286131e7565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9590613262565b60405180910390fd5b838b611aaa919061348e565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2290613af7565b60405180910390fd5b600160028f604051611b3d9190613055565b908152602001604051809103902060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508a60028f604051611bb39190613055565b90815260200160405180910390206003016000828254611bd3919061348e565b92505081905550838b611be6919061348e565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c34919061345a565b9250508190555083600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cab919061348e565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8e611cdd8361208f565b611ce68e612252565b604051602001611cf893929190613b63565b604051602081830303815290604052604051611d149190613738565b60405180910390a150508080611d29906132b1565b915050611926565b505050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d9757600080fd5b600047905060008290508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611de7573d6000803e3d6000fd5b507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611e1283612252565b604051602001611e229190613bf6565b604051602081830303815290604052604051611e3e9190613738565b60405180910390a1505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611eca57600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f60919061348e565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611f913361208f565b611fd9600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612252565b604051602001611fea929190613c77565b6040516020818303038152906040526040516120069190613738565b60405180910390a1565b600061204584848460405160200161202a93929190613da1565b60405160208183030381529060405280519060200120612421565b90509392505050565b60006120858585858560405160200161206a9493929190613e1e565b60405160208183030381529060405280519060200120612421565b9050949350505050565b60606000602867ffffffffffffffff8111156120ae576120ad6124fa565b5b6040519080825280601f01601f1916602001820160405280156120e05781602001600182028036833780820191505090505b50905060005b60148110156122485760008160136120fe919061345a565b600861210a9190613e64565b60026121169190613fd9565b8573ffffffffffffffffffffffffffffffffffffffff1661213791906134f1565b60f81b9050600060108260f81c61214e9190614024565b60f81b905060008160f81c60106121659190614055565b8360f81c6121739190614092565b60f81b905061218182612451565b8585600261218f9190613e64565b815181106121a05761219f6131e7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506121d881612451565b8560018660026121e89190613e64565b6121f2919061348e565b81518110612203576122026131e7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080612240906132b1565b9150506120e6565b5080915050919050565b606060008203612299576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506123d5565b600082905060005b600082146122cb5780806122b4906132b1565b915050600a826122c491906134f1565b91506122a1565b60008167ffffffffffffffff8111156122e7576122e66124fa565b5b6040519080825280601f01601f1916602001820160405280156123195781602001600182028036833780820191505090505b50905060008290505b600086146123cd57600181612337919061345a565b90506000600a808861234991906134f1565b6123539190613e64565b8761235e919061345a565b603061236a91906140c7565b905060008160f81b905080848481518110612388576123876131e7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886123c491906134f1565b97505050612322565b819450505050505b919050565b60006124158787878787876040516020016123fa969594939291906140fc565b60405160208183030381529060405280519060200120612421565b90509695505050505050565b60008160405160200161243491906141d5565b604051602081830303815290604052805190602001209050919050565b6000600a8260f81c60ff16101561247c5760308260f81c61247291906140c7565b60f81b9050612492565b60578260f81c61248c91906140c7565b60f81b90505b919050565b6000819050919050565b6124aa81612497565b82525050565b60006020820190506124c560008301846124a1565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612532826124e9565b810181811067ffffffffffffffff82111715612551576125506124fa565b5b80604052505050565b60006125646124cb565b90506125708282612529565b919050565b600067ffffffffffffffff8211156125905761258f6124fa565b5b612599826124e9565b9050602081019050919050565b82818337600083830152505050565b60006125c86125c384612575565b61255a565b9050828152602081018484840111156125e4576125e36124e4565b5b6125ef8482856125a6565b509392505050565b600082601f83011261260c5761260b6124df565b5b813561261c8482602086016125b5565b91505092915050565b600067ffffffffffffffff8211156126405761263f6124fa565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061268182612656565b9050919050565b61269181612676565b811461269c57600080fd5b50565b6000813590506126ae81612688565b92915050565b60006126c76126c284612625565b61255a565b905080838252602082019050602084028301858111156126ea576126e9612651565b5b835b8181101561271357806126ff888261269f565b8452602084019350506020810190506126ec565b5050509392505050565b600082601f830112612732576127316124df565b5b81356127428482602086016126b4565b91505092915050565b600067ffffffffffffffff821115612766576127656124fa565b5b602082029050602081019050919050565b61278081612497565b811461278b57600080fd5b50565b60008135905061279d81612777565b92915050565b60006127b66127b18461274b565b61255a565b905080838252602082019050602084028301858111156127d9576127d8612651565b5b835b8181101561280257806127ee888261278e565b8452602084019350506020810190506127db565b5050509392505050565b600082601f830112612821576128206124df565b5b81356128318482602086016127a3565b91505092915050565b600067ffffffffffffffff821115612855576128546124fa565b5b602082029050602081019050919050565b600060ff82169050919050565b61287c81612866565b811461288757600080fd5b50565b60008135905061289981612873565b92915050565b60006128b26128ad8461283a565b61255a565b905080838252602082019050602084028301858111156128d5576128d4612651565b5b835b818110156128fe57806128ea888261288a565b8452602084019350506020810190506128d7565b5050509392505050565b600082601f83011261291d5761291c6124df565b5b813561292d84826020860161289f565b91505092915050565b600067ffffffffffffffff821115612951576129506124fa565b5b602082029050602081019050919050565b6000819050919050565b61297581612962565b811461298057600080fd5b50565b6000813590506129928161296c565b92915050565b60006129ab6129a684612936565b61255a565b905080838252602082019050602084028301858111156129ce576129cd612651565b5b835b818110156129f757806129e38882612983565b8452602084019350506020810190506129d0565b5050509392505050565b600082601f830112612a1657612a156124df565b5b8135612a26848260208601612998565b91505092915050565b600080600080600080600060e0888a031215612a4e57612a4d6124d5565b5b600088013567ffffffffffffffff811115612a6c57612a6b6124da565b5b612a788a828b016125f7565b975050602088013567ffffffffffffffff811115612a9957612a986124da565b5b612aa58a828b0161271d565b965050604088013567ffffffffffffffff811115612ac657612ac56124da565b5b612ad28a828b0161280c565b955050606088013567ffffffffffffffff811115612af357612af26124da565b5b612aff8a828b01612908565b945050608088013567ffffffffffffffff811115612b2057612b1f6124da565b5b612b2c8a828b01612a01565b93505060a088013567ffffffffffffffff811115612b4d57612b4c6124da565b5b612b598a828b01612a01565b92505060c0612b6a8a828b0161278e565b91505092959891949750929550565b600080600080600080600080610100898b031215612b9a57612b996124d5565b5b600089013567ffffffffffffffff811115612bb857612bb76124da565b5b612bc48b828c016125f7565b985050602089013567ffffffffffffffff811115612be557612be46124da565b5b612bf18b828c0161271d565b9750506040612c028b828c0161269f565b9650506060612c138b828c0161278e565b9550506080612c248b828c0161288a565b94505060a0612c358b828c01612983565b93505060c0612c468b828c01612983565b92505060e0612c578b828c0161278e565b9150509295985092959890939650565b60008060008060008060c08789031215612c8457612c836124d5565b5b600087013567ffffffffffffffff811115612ca257612ca16124da565b5b612cae89828a016125f7565b965050602087013567ffffffffffffffff811115612ccf57612cce6124da565b5b612cdb89828a0161271d565b9550506040612cec89828a0161278e565b9450506060612cfd89828a0161288a565b9350506080612d0e89828a01612983565b92505060a0612d1f89828a01612983565b9150509295509295509295565b600080600080600080600060e0888a031215612d4b57612d4a6124d5565b5b600088013567ffffffffffffffff811115612d6957612d686124da565b5b612d758a828b016125f7565b975050602088013567ffffffffffffffff811115612d9657612d956124da565b5b612da28a828b0161271d565b9650506040612db38a828b0161278e565b9550506060612dc48a828b0161288a565b9450506080612dd58a828b01612983565b93505060a0612de68a828b01612983565b92505060c0612df78a828b0161278e565b91505092959891949750929550565b6000806000806000806000806000806101408b8d031215612e2a57612e296124d5565b5b60008b013567ffffffffffffffff811115612e4857612e476124da565b5b612e548d828e016125f7565b9a505060208b013567ffffffffffffffff811115612e7557612e746124da565b5b612e818d828e0161271d565b9950506040612e928d828e0161269f565b9850506060612ea38d828e0161278e565b9750506080612eb48d828e0161278e565b96505060a08b013567ffffffffffffffff811115612ed557612ed46124da565b5b612ee18d828e0161280c565b95505060c08b013567ffffffffffffffff811115612f0257612f016124da565b5b612f0e8d828e01612908565b94505060e08b013567ffffffffffffffff811115612f2f57612f2e6124da565b5b612f3b8d828e01612a01565b9350506101008b013567ffffffffffffffff811115612f5d57612f5c6124da565b5b612f698d828e01612a01565b925050610120612f7b8d828e0161278e565b9150509295989b9194979a5092959850565b600060208284031215612fa357612fa26124d5565b5b6000612fb18482850161269f565b91505092915050565b612fc381612676565b82525050565b6000602082019050612fde6000830184612fba565b92915050565b600081519050919050565b600081905092915050565b60005b83811015613018578082015181840152602081019050612ffd565b60008484015250505050565b600061302f82612fe4565b6130398185612fef565b9350613049818560208601612ffa565b80840191505092915050565b60006130618284613024565b915081905092915050565b600082825260208201905092915050565b7f62657420706f6f6c20746f6f206c6f7720666f72206665650000000000000000600082015250565b60006130b360188361306c565b91506130be8261307d565b602082019050919050565b600060208201905081810360008301526130e2816130a6565b9050919050565b7f62657473206d6179206f6e6c792062652063616e63656c656420696620756e7260008201527f65636f6e63696c65640000000000000000000000000000000000000000000000602082015250565b600061314560298361306c565b9150613150826130e9565b604082019050919050565b6000602082019050818103600083015261317481613138565b9050919050565b7f696e76616c6964207061727469636970616e7473000000000000000000000000600082015250565b60006131b160148361306c565b91506131bc8261317b565b602082019050919050565b600060208201905081810360008301526131e0816131a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e76616c6964207061727469636970616e7400000000000000000000000000600082015250565b600061324c60138361306c565b915061325782613216565b602082019050919050565b6000602082019050818103600083015261327b8161323f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006132bc82612497565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036132ee576132ed613282565b5b600182019050919050565b7f616c6c207061727469636970616e7473206d757374207369676e20746f20616260008201527f6f72740000000000000000000000000000000000000000000000000000000000602082015250565b600061335560238361306c565b9150613360826132f9565b604082019050919050565b6000602082019050818103600083015261338481613348565b9050919050565b61339481612962565b82525050565b6133a381612866565b82525050565b60006080820190506133be600083018761338b565b6133cb602083018661339a565b6133d8604083018561338b565b6133e5606083018461338b565b95945050505050565b7f696e76616c6964207369676e6572000000000000000000000000000000000000600082015250565b6000613424600e8361306c565b915061342f826133ee565b602082019050919050565b6000602082019050818103600083015261345381613417565b9050919050565b600061346582612497565b915061347083612497565b925082820390508181111561348857613487613282565b5b92915050565b600061349982612497565b91506134a483612497565b92508282019050808211156134bc576134bb613282565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134fc82612497565b915061350783612497565b925082613517576135166134c2565b5b828204905092915050565b7f62657420686173206e6f74207965742065787069726564000000000000000000600082015250565b600061355860178361306c565b915061356382613522565b602082019050919050565b600060208201905081810360008301526135878161354b565b9050919050565b7f696e76616c6964206d6f64657261746f72207369676e61747572650000000000600082015250565b60006135c4601b8361306c565b91506135cf8261358e565b602082019050919050565b600060208201905081810360008301526135f3816135b7565b9050919050565b7f62657449645b0000000000000000000000000000000000000000000000000000815250565b7f5d207061727469636970616e745b000000000000000000000000000000000000815250565b7f5d2077696e6e696e67735b000000000000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b600061369d826135fa565b6006820191506136ad8286613024565b91506136b882613620565b600e820191506136c88285613024565b91506136d382613646565b600b820191506136e38284613024565b91506136ee8261366c565b600182019150819050949350505050565b600061370a82612fe4565b613714818561306c565b9350613724818560208601612ffa565b61372d816124e9565b840191505092915050565b6000602082019050818103600083015261375281846136ff565b905092915050565b7f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b600061379060128361306c565b915061379b8261375a565b602082019050919050565b600060208201905081810360008301526137bf81613783565b9050919050565b7f77697468647261775b0000000000000000000000000000000000000000000000815250565b7f5d20616d6f756e745b0000000000000000000000000000000000000000000000815250565b600061381d826137c6565b60098201915061382d8285613024565b9150613838826137ec565b6009820191506138488284613024565b91506138538261366c565b6001820191508190509392505050565b7f62657473206d6179206f6e6c792062652063616e63656c65642033302b20646160008201527f79732061667465722065787069726174696f6e00000000000000000000000000602082015250565b60006138bf60338361306c565b91506138ca82613863565b604082019050919050565b600060208201905081810360008301526138ee816138b2565b9050919050565b7f63616e63656c6572206973206e6f7420617574686f72697a656420746f20636160008201527f6e63656c20746869732062657400000000000000000000000000000000000000602082015250565b6000613951602d8361306c565b915061395c826138f5565b604082019050919050565b6000602082019050818103600083015261398081613944565b9050919050565b7f63616e63656c657220646964206e6f7420726571756573742063616e63656c6160008201527f74696f6e00000000000000000000000000000000000000000000000000000000602082015250565b60006139e360248361306c565b91506139ee82613987565b604082019050919050565b60006020820190508181036000830152613a12816139d6565b9050919050565b7f7369676e657220646f6573206e6f7420686176652074686520617574686f726960008201527f747920746f2063616e63656c2074686520626574000000000000000000000000602082015250565b6000613a7560348361306c565b9150613a8082613a19565b604082019050919050565b60006020820190508181036000830152613aa481613a68565b9050919050565b7f696e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000613ae160128361306c565b9150613aec82613aab565b602082019050919050565b60006020820190508181036000830152613b1081613ad4565b9050919050565b7f5d20706172745b00000000000000000000000000000000000000000000000000815250565b7f5d206265745b0000000000000000000000000000000000000000000000000000815250565b6000613b6e826135fa565b600682019150613b7e8286613024565b9150613b8982613b17565b600782019150613b998285613024565b9150613ba482613b3d565b600682019150613bb48284613024565b9150613bbf8261366c565b600182019150819050949350505050565b7f7472616e736665725b0000000000000000000000000000000000000000000000815250565b6000613c0182613bd0565b600982019150613c118284613024565b9150613c1c8261366c565b60018201915081905092915050565b7f6465706f7369745b000000000000000000000000000000000000000000000000815250565b7f5d2062616c616e63655b00000000000000000000000000000000000000000000815250565b6000613c8282613c2b565b600882019150613c928285613024565b9150613c9d82613c51565b600a82019150613cad8284613024565b9150613cb88261366c565b6001820191508190509392505050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b613cf781612676565b82525050565b6000613d098383613cee565b60208301905092915050565b6000602082019050919050565b6000613d2d82613cc8565b613d378185613cd3565b9350613d4283613cde565b8060005b83811015613d73578151613d5a8882613cfd565b9750613d6583613d15565b925050600181019050613d46565b5085935050505092915050565b6000819050919050565b613d9b613d9682612497565b613d80565b82525050565b6000613dad8286613024565b9150613db98285613d22565b9150613dc58284613d8a565b602082019150819050949350505050565b60008160601b9050919050565b6000613dee82613dd6565b9050919050565b6000613e0082613de3565b9050919050565b613e18613e1382612676565b613df5565b82525050565b6000613e2a8287613024565b9150613e368286613d22565b9150613e428285613e07565b601482019150613e528284613d8a565b60208201915081905095945050505050565b6000613e6f82612497565b9150613e7a83612497565b9250828202613e8881612497565b91508282048414831517613e9f57613e9e613282565b5b5092915050565b60008160011c9050919050565b6000808291508390505b6001851115613efd57808604811115613ed957613ed8613282565b5b6001851615613ee85780820291505b8081029050613ef685613ea6565b9450613ebd565b94509492505050565b600082613f165760019050613fd2565b81613f245760009050613fd2565b8160018114613f3a5760028114613f4457613f73565b6001915050613fd2565b60ff841115613f5657613f55613282565b5b8360020a915084821115613f6d57613f6c613282565b5b50613fd2565b5060208310610133831016604e8410600b8410161715613fa85782820a905083811115613fa357613fa2613282565b5b613fd2565b613fb58484846001613eb3565b92509050818404811115613fcc57613fcb613282565b5b81810290505b9392505050565b6000613fe482612497565b9150613fef83612497565b925061401c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613f06565b905092915050565b600061402f82612866565b915061403a83612866565b92508261404a576140496134c2565b5b828204905092915050565b600061406082612866565b915061406b83612866565b925082820261407981612866565b915080821461408b5761408a613282565b5b5092915050565b600061409d82612866565b91506140a883612866565b9250828203905060ff8111156140c1576140c0613282565b5b92915050565b60006140d282612866565b91506140dd83612866565b9250828201905060ff8111156140f6576140f5613282565b5b92915050565b60006141088289613024565b91506141148288613e07565b6014820191506141248287613e07565b6014820191506141348286613d8a565b6020820191506141448285613d8a565b6020820191506141548284613d8a565b602082019150819050979650505050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061419e601c83612fef565b91506141a982614168565b601c82019050919050565b6000819050919050565b6141cf6141ca82612962565b6141b4565b82525050565b60006141e082614191565b91506141ec82846141be565b6020820191508190509291505056fea2646970667358221220f4ae190db3be9ab2957b2cf916f8d7d26ea6de4d79425a1571e4a23bcf14e58364736f6c63430008110033",
}

// BankABI is the input ABI used to generate the binding from.
// Deprecated: Use BankMetaData.ABI instead.
var BankABI = BankMetaData.ABI

// BankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BankMetaData.Bin instead.
var BankBin = BankMetaData.Bin

// DeployBank deploys a new Ethereum contract, binding an instance of Bank to it.
func DeployBank(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bank, error) {
	parsed, err := BankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BankBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bank{BankCaller: BankCaller{contract: contract}, BankTransactor: BankTransactor{contract: contract}, BankFilterer: BankFilterer{contract: contract}}, nil
}

// Bank is an auto generated Go binding around an Ethereum contract.
type Bank struct {
	BankCaller     // Read-only binding to the contract
	BankTransactor // Write-only binding to the contract
	BankFilterer   // Log filterer for contract events
}

// BankCaller is an auto generated read-only Go binding around an Ethereum contract.
type BankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BankSession struct {
	Contract     *Bank             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BankCallerSession struct {
	Contract *BankCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BankTransactorSession struct {
	Contract     *BankTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BankRaw is an auto generated low-level Go binding around an Ethereum contract.
type BankRaw struct {
	Contract *Bank // Generic contract binding to access the raw methods on
}

// BankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BankCallerRaw struct {
	Contract *BankCaller // Generic read-only contract binding to access the raw methods on
}

// BankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BankTransactorRaw struct {
	Contract *BankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBank creates a new instance of Bank, bound to a specific deployed contract.
func NewBank(address common.Address, backend bind.ContractBackend) (*Bank, error) {
	contract, err := bindBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bank{BankCaller: BankCaller{contract: contract}, BankTransactor: BankTransactor{contract: contract}, BankFilterer: BankFilterer{contract: contract}}, nil
}

// NewBankCaller creates a new read-only instance of Bank, bound to a specific deployed contract.
func NewBankCaller(address common.Address, caller bind.ContractCaller) (*BankCaller, error) {
	contract, err := bindBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BankCaller{contract: contract}, nil
}

// NewBankTransactor creates a new write-only instance of Bank, bound to a specific deployed contract.
func NewBankTransactor(address common.Address, transactor bind.ContractTransactor) (*BankTransactor, error) {
	contract, err := bindBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BankTransactor{contract: contract}, nil
}

// NewBankFilterer creates a new log filterer instance of Bank, bound to a specific deployed contract.
func NewBankFilterer(address common.Address, filterer bind.ContractFilterer) (*BankFilterer, error) {
	contract, err := bindBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BankFilterer{contract: contract}, nil
}

// bindBank binds a generic wrapper to an already deployed contract.
func bindBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bank *BankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bank.Contract.BankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bank *BankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.Contract.BankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bank *BankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bank.Contract.BankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bank *BankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bank *BankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bank *BankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bank.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "AccountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Bank.Contract.AccountBalance(&_Bank.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Bank.Contract.AccountBalance(&_Bank.CallOpts, account)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankCaller) Balance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Balance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankSession) Balance() (*big.Int, error) {
	return _Bank.Contract.Balance(&_Bank.CallOpts)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankCallerSession) Balance() (*big.Int, error) {
	return _Bank.Contract.Balance(&_Bank.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankSession) Owner() (common.Address, error) {
	return _Bank.Contract.Owner(&_Bank.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankCallerSession) Owner() (common.Address, error) {
	return _Bank.Contract.Owner(&_Bank.CallOpts)
}

// AbortBet is a paid mutator transaction binding the contract method 0x214bcc4d.
//
// Solidity: function AbortBet(string betId, address[] participants, uint256[] nonce, uint8[] v, bytes32[] r, bytes32[] s, uint256 feeAmount) returns()
func (_Bank *BankTransactor) AbortBet(opts *bind.TransactOpts, betId string, participants []common.Address, nonce []*big.Int, v []uint8, r [][32]byte, s [][32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "AbortBet", betId, participants, nonce, v, r, s, feeAmount)
}

// AbortBet is a paid mutator transaction binding the contract method 0x214bcc4d.
//
// Solidity: function AbortBet(string betId, address[] participants, uint256[] nonce, uint8[] v, bytes32[] r, bytes32[] s, uint256 feeAmount) returns()
func (_Bank *BankSession) AbortBet(betId string, participants []common.Address, nonce []*big.Int, v []uint8, r [][32]byte, s [][32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.AbortBet(&_Bank.TransactOpts, betId, participants, nonce, v, r, s, feeAmount)
}

// AbortBet is a paid mutator transaction binding the contract method 0x214bcc4d.
//
// Solidity: function AbortBet(string betId, address[] participants, uint256[] nonce, uint8[] v, bytes32[] r, bytes32[] s, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) AbortBet(betId string, participants []common.Address, nonce []*big.Int, v []uint8, r [][32]byte, s [][32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.AbortBet(&_Bank.TransactOpts, betId, participants, nonce, v, r, s, feeAmount)
}

// CancelBet is a paid mutator transaction binding the contract method 0x6329dd9a.
//
// Solidity: function CancelBet(string betId, address[] participants, uint256 nonce, uint8 v, bytes32 r, bytes32 s) returns()
func (_Bank *BankTransactor) CancelBet(opts *bind.TransactOpts, betId string, participants []common.Address, nonce *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "CancelBet", betId, participants, nonce, v, r, s)
}

// CancelBet is a paid mutator transaction binding the contract method 0x6329dd9a.
//
// Solidity: function CancelBet(string betId, address[] participants, uint256 nonce, uint8 v, bytes32 r, bytes32 s) returns()
func (_Bank *BankSession) CancelBet(betId string, participants []common.Address, nonce *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBet(&_Bank.TransactOpts, betId, participants, nonce, v, r, s)
}

// CancelBet is a paid mutator transaction binding the contract method 0x6329dd9a.
//
// Solidity: function CancelBet(string betId, address[] participants, uint256 nonce, uint8 v, bytes32 r, bytes32 s) returns()
func (_Bank *BankTransactorSession) CancelBet(betId string, participants []common.Address, nonce *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBet(&_Bank.TransactOpts, betId, participants, nonce, v, r, s)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankSession) Deposit() (*types.Transaction, error) {
	return _Bank.Contract.Deposit(&_Bank.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankTransactorSession) Deposit() (*types.Transaction, error) {
	return _Bank.Contract.Deposit(&_Bank.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0x93f28237.
//
// Solidity: function Drain(address target) payable returns()
func (_Bank *BankTransactor) Drain(opts *bind.TransactOpts, target common.Address) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Drain", target)
}

// Drain is a paid mutator transaction binding the contract method 0x93f28237.
//
// Solidity: function Drain(address target) payable returns()
func (_Bank *BankSession) Drain(target common.Address) (*types.Transaction, error) {
	return _Bank.Contract.Drain(&_Bank.TransactOpts, target)
}

// Drain is a paid mutator transaction binding the contract method 0x93f28237.
//
// Solidity: function Drain(address target) payable returns()
func (_Bank *BankTransactorSession) Drain(target common.Address) (*types.Transaction, error) {
	return _Bank.Contract.Drain(&_Bank.TransactOpts, target)
}

// ModeratorCancelBet is a paid mutator transaction binding the contract method 0x7579b65f.
//
// Solidity: function ModeratorCancelBet(string betId, address[] participants, uint256 nonce, uint8 v, bytes32 r, bytes32 s, uint256 feeAmount) returns()
func (_Bank *BankTransactor) ModeratorCancelBet(opts *bind.TransactOpts, betId string, participants []common.Address, nonce *big.Int, v uint8, r [32]byte, s [32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "ModeratorCancelBet", betId, participants, nonce, v, r, s, feeAmount)
}

// ModeratorCancelBet is a paid mutator transaction binding the contract method 0x7579b65f.
//
// Solidity: function ModeratorCancelBet(string betId, address[] participants, uint256 nonce, uint8 v, bytes32 r, bytes32 s, uint256 feeAmount) returns()
func (_Bank *BankSession) ModeratorCancelBet(betId string, participants []common.Address, nonce *big.Int, v uint8, r [32]byte, s [32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.ModeratorCancelBet(&_Bank.TransactOpts, betId, participants, nonce, v, r, s, feeAmount)
}

// ModeratorCancelBet is a paid mutator transaction binding the contract method 0x7579b65f.
//
// Solidity: function ModeratorCancelBet(string betId, address[] participants, uint256 nonce, uint8 v, bytes32 r, bytes32 s, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) ModeratorCancelBet(betId string, participants []common.Address, nonce *big.Int, v uint8, r [32]byte, s [32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.ModeratorCancelBet(&_Bank.TransactOpts, betId, participants, nonce, v, r, s, feeAmount)
}

// PlaceBetsSigned is a paid mutator transaction binding the contract method 0x82f35cd2.
//
// Solidity: function PlaceBetsSigned(string betId, address[] participants, address moderator, uint256 amount, uint256 expiration, uint256[] nonce, uint8[] v, bytes32[] r, bytes32[] s, uint256 feeAmount) returns()
func (_Bank *BankTransactor) PlaceBetsSigned(opts *bind.TransactOpts, betId string, participants []common.Address, moderator common.Address, amount *big.Int, expiration *big.Int, nonce []*big.Int, v []uint8, r [][32]byte, s [][32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "PlaceBetsSigned", betId, participants, moderator, amount, expiration, nonce, v, r, s, feeAmount)
}

// PlaceBetsSigned is a paid mutator transaction binding the contract method 0x82f35cd2.
//
// Solidity: function PlaceBetsSigned(string betId, address[] participants, address moderator, uint256 amount, uint256 expiration, uint256[] nonce, uint8[] v, bytes32[] r, bytes32[] s, uint256 feeAmount) returns()
func (_Bank *BankSession) PlaceBetsSigned(betId string, participants []common.Address, moderator common.Address, amount *big.Int, expiration *big.Int, nonce []*big.Int, v []uint8, r [][32]byte, s [][32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.PlaceBetsSigned(&_Bank.TransactOpts, betId, participants, moderator, amount, expiration, nonce, v, r, s, feeAmount)
}

// PlaceBetsSigned is a paid mutator transaction binding the contract method 0x82f35cd2.
//
// Solidity: function PlaceBetsSigned(string betId, address[] participants, address moderator, uint256 amount, uint256 expiration, uint256[] nonce, uint8[] v, bytes32[] r, bytes32[] s, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) PlaceBetsSigned(betId string, participants []common.Address, moderator common.Address, amount *big.Int, expiration *big.Int, nonce []*big.Int, v []uint8, r [][32]byte, s [][32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.PlaceBetsSigned(&_Bank.TransactOpts, betId, participants, moderator, amount, expiration, nonce, v, r, s, feeAmount)
}

// ReconcileSigned is a paid mutator transaction binding the contract method 0x47712304.
//
// Solidity: function ReconcileSigned(string betId, address[] winners, address moderator, uint256 nonce, uint8 v, bytes32 r, bytes32 s, uint256 feeAmount) returns()
func (_Bank *BankTransactor) ReconcileSigned(opts *bind.TransactOpts, betId string, winners []common.Address, moderator common.Address, nonce *big.Int, v uint8, r [32]byte, s [32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "ReconcileSigned", betId, winners, moderator, nonce, v, r, s, feeAmount)
}

// ReconcileSigned is a paid mutator transaction binding the contract method 0x47712304.
//
// Solidity: function ReconcileSigned(string betId, address[] winners, address moderator, uint256 nonce, uint8 v, bytes32 r, bytes32 s, uint256 feeAmount) returns()
func (_Bank *BankSession) ReconcileSigned(betId string, winners []common.Address, moderator common.Address, nonce *big.Int, v uint8, r [32]byte, s [32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.ReconcileSigned(&_Bank.TransactOpts, betId, winners, moderator, nonce, v, r, s, feeAmount)
}

// ReconcileSigned is a paid mutator transaction binding the contract method 0x47712304.
//
// Solidity: function ReconcileSigned(string betId, address[] winners, address moderator, uint256 nonce, uint8 v, bytes32 r, bytes32 s, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) ReconcileSigned(betId string, winners []common.Address, moderator common.Address, nonce *big.Int, v uint8, r [32]byte, s [32]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.ReconcileSigned(&_Bank.TransactOpts, betId, winners, moderator, nonce, v, r, s, feeAmount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankSession) Withdraw() (*types.Transaction, error) {
	return _Bank.Contract.Withdraw(&_Bank.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Bank.Contract.Withdraw(&_Bank.TransactOpts)
}

// BankEventLogIterator is returned from FilterEventLog and is used to iterate over the raw logs and unpacked data for EventLog events raised by the Bank contract.
type BankEventLogIterator struct {
	Event *BankEventLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BankEventLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BankEventLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BankEventLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BankEventLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BankEventLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BankEventLog represents a EventLog event raised by the Bank contract.
type BankEventLog struct {
	Value string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEventLog is a free log retrieval operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) FilterEventLog(opts *bind.FilterOpts) (*BankEventLogIterator, error) {

	logs, sub, err := _Bank.contract.FilterLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return &BankEventLogIterator{contract: _Bank.contract, event: "EventLog", logs: logs, sub: sub}, nil
}

// WatchEventLog is a free log subscription operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) WatchEventLog(opts *bind.WatchOpts, sink chan<- *BankEventLog) (event.Subscription, error) {

	logs, sub, err := _Bank.contract.WatchLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BankEventLog)
				if err := _Bank.contract.UnpackLog(event, "EventLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventLog is a log parse operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) ParseEventLog(log types.Log) (*BankEventLog, error) {
	event := new(BankEventLog)
	if err := _Bank.contract.UnpackLog(event, "EventLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
