// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bank

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BankMetaData contains all meta data concerning the Bank contract.
var BankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"EventLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"CancelBetExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"CancelBetModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"CancelBetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"CancelBetParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Drain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"PlaceBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"ReconcileBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614773806100606000396000f3fe6080604052600436106100c25760003560e01c80637c64ce361161007f578063e2a06aca11610059578063e2a06aca14610212578063e63f341f1461023b578063ed21248c14610278578063f8856b8814610282576100c2565b80637c64ce36146101b4578063b4a99a4e146101dd578063d67a073f14610208576100c2565b80630e302132146100c75780630ee216b7146100f05780630ef6788714610119578063221da6a51461014457806330d0cee91461016d57806357ea89b6146101aa575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190612fbb565b6102ab565b005b3480156100fc57600080fd5b506101176004803603810190610112919061307b565b61085e565b005b34801561012557600080fd5b5061012e610b03565b60405161013b91906130e6565b60405180910390f35b34801561015057600080fd5b5061016b6004803603810190610166919061321a565b610b4d565b005b34801561017957600080fd5b50610194600480360381019061018f91906132da565b61113b565b6040516101a191906130e6565b60405180910390f35b6101b26111e0565b005b3480156101c057600080fd5b506101db60048036038101906101d69190613307565b61137b565b005b3480156101e957600080fd5b506101f261188c565b6040516101ff91906133ba565b60405180910390f35b6102106118b0565b005b34801561021e57600080fd5b50610239600480360381019061023491906133d5565b6119c5565b005b34801561024757600080fd5b50610262600480360381019061025d91906132da565b61220a565b60405161026f91906130e6565b60405180910390f35b6102806122af565b005b34801561028e57600080fd5b506102a960048036038101906102a491906134ff565b6123b4565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461030357600080fd5b600060028660405161031591906135b9565b90815260200160405180910390209050600160ff168160000160009054906101000a900460ff1660ff161461037f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103769061362d565b60405180910390fd5b80600501544210156103c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bd90613699565b60405180910390fd5b84600160008360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541461046e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046590613705565b60405180910390fd5b6000868260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040516020016104a99392919061375e565b6040516020818303038152906040528051906020012090506000806104cf838888612662565b9150915080600001511561051e5780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610515919061379c565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a79061380a565b60405180910390fd5b84518460020180549050146105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190613876565b60405180910390fd5b60005b85518110156106c15784600101600087838151811061061f5761061e613896565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a590613911565b60405180910390fd5b80806106b990613960565b9150506105fd565b5060005b8551811015610758578460040154600160008884815181106106ea576106e9613896565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461073e91906139a8565b92505081905550808061075090613960565b9150506106c5565b50600160008560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008154809291906107d090613960565b919050555060028460000160006101000a81548160ff021916908360ff160217905550600084600401819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8960405160200161082f9190613a02565b60405160208183030381529060405260405161084b919061379c565b60405180910390a1505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108b657600080fd5b60006002836040516108c891906135b9565b90815260200160405180910390209050600160ff168160000160009054906101000a900460ff1660ff1614610932576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109299061362d565b60405180910390fd5b60008282600401546109449190613a28565b905060005b8260020180549050811015610a7e57816001600085600201848154811061097357610972613896565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546109ea91906139a8565b9250508190555083600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610a6491906139a8565b925050819055508080610a7690613960565b915050610949565b5060038260000160006101000a81548160ff021916908360ff160217905550600082600401819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a84604051602001610ad99190613a82565b604051602081830303815290604052604051610af5919061379c565b60405180910390a150505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ba557600080fd5b6000600286604051610bb791906135b9565b90815260200160405180910390209050600160ff168160000160009054906101000a900460ff1660ff1614610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c189061362d565b60405180910390fd5b828290508160020180549050141580610c4257508351816002018054905014155b15610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7990613b1a565b60405180910390fd5b60005b8160020180549050811015610f66576000826002018281548110610cac57610cab613896565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000868381518110610cee57610ced613896565b5b60200260200101519050366000878786818110610d0e57610d0d613896565b5b9050602002810190610d209190613b49565b9150915082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414610dd157610d76846127fb565b604051602001610d869190613bd2565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc8919061379c565b60405180910390fd5b60008b8585604051602001610de89392919061375e565b604051602081830303815290604052805190602001209050600080610e0e838686612662565b91509150806000015115610e5d5780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e54919061379c565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ef457610e99876127fb565b604051602001610ea99190613c1e565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eeb919061379c565b60405180910390fd5b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190610f4790613960565b9190505550505050505050508080610f5e90613960565b915050610c85565b506000858260040154610f799190613a28565b905060005b82600201805490508110156110b3578160016000856002018481548110610fa857610fa7613896565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461101f91906139a8565b9250508190555086600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461109991906139a8565b9250508190555080806110ab90613960565b915050610f7e565b5060038260000160006101000a81548160ff021916908360ff160217905550600082600401819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8760405160200161110e9190613cb6565b60405160208183030381529060405260405161112a919061379c565b60405180910390a150505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461119657600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b60003390506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000810361126f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126690613d24565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156112b5573d6000803e3d6000fd5b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546113089190613a28565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611339336127fb565b611342836129be565b604051602001611353929190613db6565b60405160208183030381529060405260405161136f919061379c565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113d357600080fd5b60006002866040516113e591906135b9565b90815260200160405180910390209050600160ff168160000160009054906101000a900460ff1660ff161461144f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114469061362d565b60405180910390fd5b83600160008360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154146114f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ee90613705565b60405180910390fd5b6000868260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040516020016115329392919061375e565b604051602081830303815290604052805190602001209050600080611558838787612662565b915091508060000151156115a75780602001516040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159e919061379c565b60405180910390fd5b8360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611639576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116309061380a565b60405180910390fd5b600088856004015461164b9190613a28565b905060005b856002018054905081101561178557816001600088600201848154811061167a57611679613896565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546116f191906139a8565b9250508190555089600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461176b91906139a8565b92505081905550808061177d90613960565b915050611650565b50600160008660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008154809291906117fd90613960565b919050555060038560000160006101000a81548160ff021916908360ff160217905550600085600401819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a60405160200161185c9190613e2d565b604051602081830303815290604052604051611878919061379c565b60405180910390a150505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461190857600080fd5b600033905060004790508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611958573d6000803e3d6000fd5b507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611983836127fb565b61198c836129be565b60405160200161199d929190613e79565b6040516020818303038152906040526040516119b9919061379c565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a1d57600080fd5b600060ff1660028a604051611a3291906135b9565b908152602001604051809103902060000160009054906101000a900460ff1660ff1614611a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8b90613f16565b60405180910390fd5b60008789611aa291906139a8565b905060005b8551811015611db2576000868281518110611ac557611ac4613896565b5b602002602001015190506000868381518110611ae457611ae3613896565b5b60200260200101519050366000878786818110611b0457611b03613896565b5b9050602002810190611b169190613b49565b9150915085600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015611bc857611b6d846127fb565b604051602001611b7d9190613f5c565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbf919061379c565b60405180910390fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414611c7557611c1a846127fb565b604051602001611c2a9190613fa8565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6c919061379c565b60405180910390fd5b60008f8585604051602001611c8c9392919061375e565b604051602081830303815290604052805190602001209050600080611cb2838686612662565b91509150806000015115611d015780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf8919061379c565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611d9857611d3d876127fb565b604051602001611d4d9190613c1e565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8f919061379c565b60405180910390fd5b505050505050508080611daa90613960565b915050611aa7565b50600160028b604051611dc591906135b9565b908152602001604051809103902060000160006101000a81548160ff021916908360ff1602179055508460028b604051611dff91906135b9565b90815260200160405180910390206002019080519060200190611e23929190612be7565b508560028b604051611e3591906135b9565b908152602001604051809103902060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660028b604051611e9591906135b9565b9081526020016040518091039020600501819055508789611eb69190613a28565b60028b604051611ec691906135b9565b90815260200160405180910390206004018190555060005b85518110156120bc576000868281518110611efc57611efb613896565b5b6020026020010151905082600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611f589190613a28565b92505081905550600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190611fb290613960565b919050555089600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461202a91906139a8565b92505081905550600160028d60405161204391906135b9565b908152602001604051809103902060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505080806120b490613960565b915050611ede565b50600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166121a8576040518060600160405280600115158152602001600081526020016000815250600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201559050505b7fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a6040516020016121da9190613ff4565b6040516020818303038152906040526040516121f6919061379c565b60405180910390a150505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461226557600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461230191906139a8565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a612332336127fb565b61237d600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546129be565b60405160200161238e929190614066565b6040516020818303038152906040526040516123aa919061379c565b60405180910390a1565b60006002826040516123c691906135b9565b90815260200160405180910390209050600160ff168160000160009054906101000a900460ff1660ff1614612430576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124279061362d565b60405180910390fd5b62278d00816005015461244391906139a8565b421015612485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247c90614129565b60405180910390fd5b8060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250a906141bb565b60405180910390fd5b60005b81600201805490508110156125d55781600401546001600084600201848154811061254457612543613896565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546125bb91906139a8565b9250508190555080806125cd90613960565b915050612516565b5060038160000160006101000a81548160ff021916908360ff160217905550600081600401819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a82612629336127fb565b60405160200161263a929190614227565b604051602081830303815290604052604051612656919061379c565b60405180910390a15050565b600061266c612c71565b604184849050146126c05760006126b76040518060400160405280601881526020017f696e76616c6964207369676e6174757265206c656e6774680000000000000000815250612b46565b915091506127f3565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090506000818760405160200161270f9291906142db565b6040516020818303038152906040528051906020012090506000868660009060209261273d9392919061430d565b906127489190614360565b9050600087876020906040926127609392919061430d565b9061276b9190614360565b905060008888604081811061278357612782613896565b5b9050013560f81c60f81b60f81c9050600184828585604051600081526020016040526040516127b594939291906143ea565b6020604051602081039080840390855afa1580156127d7573d6000803e3d6000fd5b505050602060405103516127e9612b6d565b9650965050505050505b935093915050565b60606000602867ffffffffffffffff81111561281a57612819612cd9565b5b6040519080825280601f01601f19166020018201604052801561284c5781602001600182028036833780820191505090505b50905060005b60148110156129b457600081601361286a9190613a28565b6008612876919061442f565b600261288291906145bc565b8573ffffffffffffffffffffffffffffffffffffffff166128a39190614636565b60f81b9050600060108260f81c6128ba9190614667565b60f81b905060008160f81c60106128d19190614698565b8360f81c6128df91906146d3565b60f81b90506128ed82612ba1565b858560026128fb919061442f565b8151811061290c5761290b613896565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061294481612ba1565b856001866002612954919061442f565b61295e91906139a8565b8151811061296f5761296e613896565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050505080806129ac90613960565b915050612852565b5080915050919050565b606060008203612a05576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612b41565b600082905060005b60008214612a37578080612a2090613960565b915050600a82612a309190614636565b9150612a0d565b60008167ffffffffffffffff811115612a5357612a52612cd9565b5b6040519080825280601f01601f191660200182016040528015612a855781602001600182028036833780820191505090505b50905060008290505b60008614612b3957600181612aa39190613a28565b90506000600a8088612ab59190614636565b612abf919061442f565b87612aca9190613a28565b6030612ad69190614708565b905060008160f81b905080848481518110612af457612af3613896565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88612b309190614636565b97505050612a8e565b819450505050505b919050565b612b4e612c71565b6040518060400160405280600115158152602001838152509050919050565b612b75612c71565b604051806040016040528060001515815260200160405180602001604052806000815250815250905090565b6000600a8260f81c60ff161015612bcc5760308260f81c612bc29190614708565b60f81b9050612be2565b60578260f81c612bdc9190614708565b60f81b90505b919050565b828054828255906000526020600020908101928215612c60579160200282015b82811115612c5f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612c07565b5b509050612c6d9190612c8d565b5090565b6040518060400160405280600015158152602001606081525090565b5b80821115612ca6576000816000905550600101612c8e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d1182612cc8565b810181811067ffffffffffffffff82111715612d3057612d2f612cd9565b5b80604052505050565b6000612d43612caa565b9050612d4f8282612d08565b919050565b600067ffffffffffffffff821115612d6f57612d6e612cd9565b5b612d7882612cc8565b9050602081019050919050565b82818337600083830152505050565b6000612da7612da284612d54565b612d39565b905082815260208101848484011115612dc357612dc2612cc3565b5b612dce848285612d85565b509392505050565b600082601f830112612deb57612dea612cbe565b5b8135612dfb848260208601612d94565b91505092915050565b6000819050919050565b612e1781612e04565b8114612e2257600080fd5b50565b600081359050612e3481612e0e565b92915050565b600080fd5b600080fd5b60008083601f840112612e5a57612e59612cbe565b5b8235905067ffffffffffffffff811115612e7757612e76612e3a565b5b602083019150836001820283011115612e9357612e92612e3f565b5b9250929050565b600067ffffffffffffffff821115612eb557612eb4612cd9565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ef182612ec6565b9050919050565b612f0181612ee6565b8114612f0c57600080fd5b50565b600081359050612f1e81612ef8565b92915050565b6000612f37612f3284612e9a565b612d39565b90508083825260208201905060208402830185811115612f5a57612f59612e3f565b5b835b81811015612f835780612f6f8882612f0f565b845260208401935050602081019050612f5c565b5050509392505050565b600082601f830112612fa257612fa1612cbe565b5b8135612fb2848260208601612f24565b91505092915050565b600080600080600060808688031215612fd757612fd6612cb4565b5b600086013567ffffffffffffffff811115612ff557612ff4612cb9565b5b61300188828901612dd6565b955050602061301288828901612e25565b945050604086013567ffffffffffffffff81111561303357613032612cb9565b5b61303f88828901612e44565b9350935050606086013567ffffffffffffffff81111561306257613061612cb9565b5b61306e88828901612f8d565b9150509295509295909350565b6000806040838503121561309257613091612cb4565b5b600083013567ffffffffffffffff8111156130b0576130af612cb9565b5b6130bc85828601612dd6565b92505060206130cd85828601612e25565b9150509250929050565b6130e081612e04565b82525050565b60006020820190506130fb60008301846130d7565b92915050565b600067ffffffffffffffff82111561311c5761311b612cd9565b5b602082029050602081019050919050565b600061314061313b84613101565b612d39565b9050808382526020820190506020840283018581111561316357613162612e3f565b5b835b8181101561318c57806131788882612e25565b845260208401935050602081019050613165565b5050509392505050565b600082601f8301126131ab576131aa612cbe565b5b81356131bb84826020860161312d565b91505092915050565b60008083601f8401126131da576131d9612cbe565b5b8235905067ffffffffffffffff8111156131f7576131f6612e3a565b5b60208301915083602082028301111561321357613212612e3f565b5b9250929050565b60008060008060006080868803121561323657613235612cb4565b5b600086013567ffffffffffffffff81111561325457613253612cb9565b5b61326088828901612dd6565b955050602061327188828901612e25565b945050604086013567ffffffffffffffff81111561329257613291612cb9565b5b61329e88828901613196565b935050606086013567ffffffffffffffff8111156132bf576132be612cb9565b5b6132cb888289016131c4565b92509250509295509295909350565b6000602082840312156132f0576132ef612cb4565b5b60006132fe84828501612f0f565b91505092915050565b60008060008060006080868803121561332357613322612cb4565b5b600086013567ffffffffffffffff81111561334157613340612cb9565b5b61334d88828901612dd6565b955050602061335e88828901612e25565b945050604061336f88828901612e25565b935050606086013567ffffffffffffffff8111156133905761338f612cb9565b5b61339c88828901612e44565b92509250509295509295909350565b6133b481612ee6565b82525050565b60006020820190506133cf60008301846133ab565b92915050565b60008060008060008060008060006101008a8c0312156133f8576133f7612cb4565b5b60008a013567ffffffffffffffff81111561341657613415612cb9565b5b6134228c828d01612dd6565b99505060206134338c828d01612e25565b98505060406134448c828d01612e25565b97505060606134558c828d01612e25565b96505060806134668c828d01612f0f565b95505060a08a013567ffffffffffffffff81111561348757613486612cb9565b5b6134938c828d01612f8d565b94505060c08a013567ffffffffffffffff8111156134b4576134b3612cb9565b5b6134c08c828d01613196565b93505060e08a013567ffffffffffffffff8111156134e1576134e0612cb9565b5b6134ed8c828d016131c4565b92509250509295985092959850929598565b60006020828403121561351557613514612cb4565b5b600082013567ffffffffffffffff81111561353357613532612cb9565b5b61353f84828501612dd6565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561357c578082015181840152602081019050613561565b60008484015250505050565b600061359382613548565b61359d8185613553565b93506135ad81856020860161355e565b80840191505092915050565b60006135c58284613588565b915081905092915050565b600082825260208201905092915050565b7f626574206973206e6f74206c6976650000000000000000000000000000000000600082015250565b6000613617600f836135d0565b9150613622826135e1565b602082019050919050565b600060208201905081810360008301526136468161360a565b9050919050565b7f62657420686173206e6f74207965742065787069726564000000000000000000600082015250565b60006136836017836135d0565b915061368e8261364d565b602082019050919050565b600060208201905081810360008301526136b281613676565b9050919050565b7f696e76616c6964206d6f64657261746f72206e6f6e6365000000000000000000600082015250565b60006136ef6017836135d0565b91506136fa826136b9565b602082019050919050565b6000602082019050818103600083015261371e816136e2565b9050919050565b600061373082613548565b61373a81856135d0565b935061374a81856020860161355e565b61375381612cc8565b840191505092915050565b600060608201905081810360008301526137788186613725565b905061378760208301856133ab565b61379460408301846130d7565b949350505050565b600060208201905081810360008301526137b68184613725565b905092915050565b7f696e76616c6964206d6f64657261746f72207369676e61747572650000000000600082015250565b60006137f4601b836135d0565b91506137ff826137be565b602082019050919050565b60006020820190508181036000830152613823816137e7565b9050919050565b7f696e76616c6964206e756d626572206f662077696e6e65727300000000000000600082015250565b60006138606019836135d0565b915061386b8261382a565b602082019050919050565b6000602082019050818103600083015261388f81613853565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e76616c69642077696e6e6572000000000000000000000000000000000000600082015250565b60006138fb600e836135d0565b9150613906826138c5565b602082019050919050565b6000602082019050818103600083015261392a816138ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061396b82612e04565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361399d5761399c613931565b5b600182019050919050565b60006139b382612e04565b91506139be83612e04565b92508282019050808211156139d6576139d5613931565b5b92915050565b7f20686173206265656e207265636f6e63696c6564000000000000000000000000815250565b6000613a0e8284613588565b9150613a19826139dc565b60148201915081905092915050565b6000613a3382612e04565b9150613a3e83612e04565b9250828203905081811115613a5657613a55613931565b5b92915050565b7f20686173206265656e2063616e63656c6c6564206279206f776e657200000000815250565b6000613a8e8284613588565b9150613a9982613a5c565b601c8201915081905092915050565b7f696e76616c6964206e756d626572206f66207369676e617475726573206f722060008201527f6e6f6e6365730000000000000000000000000000000000000000000000000000602082015250565b6000613b046026836135d0565b9150613b0f82613aa8565b604082019050919050565b60006020820190508181036000830152613b3381613af7565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613b6657613b65613b3a565b5b80840192508235915067ffffffffffffffff821115613b8857613b87613b3f565b5b602083019250600182023603831315613ba457613ba3613b44565b5b509250929050565b7f5d2068617320616e20696e76616c6964206e6f6e636500000000000000000000815250565b6000613bde8284613588565b9150613be982613bac565b60168201915081905092915050565b7f206164647265737320646f65736e2774206d61746368207369676e6174757265815250565b6000613c2a8284613588565b9150613c3582613bf8565b60208201915081905092915050565b7f20686173206265656e2063616e63656c6c656420627920616c6c20706172746960008201527f636970616e747300000000000000000000000000000000000000000000000000602082015250565b6000613ca0602783613553565b9150613cab82613c44565b602782019050919050565b6000613cc28284613588565b9150613ccd82613c93565b915081905092915050565b7f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b6000613d0e6012836135d0565b9150613d1982613cd8565b602082019050919050565b60006020820190508181036000830152613d3d81613d01565b9050919050565b7f77697468647261775b0000000000000000000000000000000000000000000000815250565b7f5d20616d6f756e745b0000000000000000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b6000613dc182613d44565b600982019150613dd18285613588565b9150613ddc82613d6a565b600982019150613dec8284613588565b9150613df782613d90565b6001820191508190509392505050565b7f20686173206265656e2063616e63656c6c6564206279206d6f64657261746f72815250565b6000613e398284613588565b9150613e4482613e07565b60208201915081905092915050565b7f647261696e5b0000000000000000000000000000000000000000000000000000815250565b6000613e8482613e53565b600682019150613e948285613588565b9150613e9f82613d6a565b600982019150613eaf8284613588565b9150613eba82613d90565b6001820191508190509392505050565b7f62657420696420616c7265616479206578697374730000000000000000000000600082015250565b6000613f006015836135d0565b9150613f0b82613eca565b602082019050919050565b60006020820190508181036000830152613f2f81613ef3565b9050919050565b7f2068617320616e20696e73756666696369656e742062616c616e636500000000815250565b6000613f688284613588565b9150613f7382613f36565b601c8201915081905092915050565b7f2068617320616e20696e76616c6964206e6f6e63650000000000000000000000815250565b6000613fb48284613588565b9150613fbf82613f82565b60158201915081905092915050565b7f20686173206265656e20616464656420746f207468652073797374656d000000815250565b60006140008284613588565b915061400b82613fce565b601d8201915081905092915050565b7f6465706f7369745b000000000000000000000000000000000000000000000000815250565b7f5d2062616c616e63655b00000000000000000000000000000000000000000000815250565b60006140718261401a565b6008820191506140818285613588565b915061408c82614040565b600a8201915061409c8284613588565b91506140a782613d90565b6001820191508190509392505050565b7f62657473206d6179206f6e6c792062652063616e63656c65642033302b20646160008201527f79732061667465722065787069726174696f6e00000000000000000000000000602082015250565b60006141136033836135d0565b915061411e826140b7565b604082019050919050565b6000602082019050818103600083015261414281614106565b9050919050565b7f63616e63656c6572206973206e6f7420617574686f72697a656420746f20636160008201527f6e63656c20746869732062657400000000000000000000000000000000000000602082015250565b60006141a5602d836135d0565b91506141b082614149565b604082019050919050565b600060208201905081810360008301526141d481614198565b9050919050565b7f20686173206265656e2063616e63656c6c656420627920000000000000000000815250565b7f2073696e63652065787069726564000000000000000000000000000000000000815250565b60006142338285613588565b915061423e826141db565b60178201915061424e8284613588565b915061425982614201565b600e820191508190509392505050565b600081519050919050565b600081905092915050565b600061428a82614269565b6142948185614274565b93506142a481856020860161355e565b80840191505092915050565b6000819050919050565b6000819050919050565b6142d56142d0826142b0565b6142ba565b82525050565b60006142e7828561427f565b91506142f382846142c4565b6020820191508190509392505050565b600080fd5b600080fd5b6000808585111561432157614320614303565b5b8386111561433257614331614308565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b600061436c8383614348565b8261437781356142b0565b925060208210156143b7576143b27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802614353565b831692505b505092915050565b6143c8816142b0565b82525050565b600060ff82169050919050565b6143e4816143ce565b82525050565b60006080820190506143ff60008301876143bf565b61440c60208301866143db565b61441960408301856143bf565b61442660608301846143bf565b95945050505050565b600061443a82612e04565b915061444583612e04565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561447e5761447d613931565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b60018511156144e0578086048111156144bc576144bb613931565b5b60018516156144cb5780820291505b80810290506144d985614489565b94506144a0565b94509492505050565b6000826144f957600190506145b5565b8161450757600090506145b5565b816001811461451d576002811461452757614556565b60019150506145b5565b60ff84111561453957614538613931565b5b8360020a9150848211156145505761454f613931565b5b506145b5565b5060208310610133831016604e8410600b841016171561458b5782820a90508381111561458657614585613931565b5b6145b5565b6145988484846001614496565b925090508184048111156145af576145ae613931565b5b81810290505b9392505050565b60006145c782612e04565b91506145d283612e04565b92506145ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846144e9565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061464182612e04565b915061464c83612e04565b92508261465c5761465b614607565b5b828204905092915050565b6000614672826143ce565b915061467d836143ce565b92508261468d5761468c614607565b5b828204905092915050565b60006146a3826143ce565b91506146ae836143ce565b92508160ff04831182151516156146c8576146c7613931565b5b828202905092915050565b60006146de826143ce565b91506146e9836143ce565b9250828203905060ff81111561470257614701613931565b5b92915050565b6000614713826143ce565b915061471e836143ce565b9250828201905060ff81111561473757614736613931565b5b9291505056fea2646970667358221220f0fd6a30a2b7c2898d6700f02e17841dcfb1a8a6c97caf4e35538640574fd3fc64736f6c63430008100033",
}

// BankABI is the input ABI used to generate the binding from.
// Deprecated: Use BankMetaData.ABI instead.
var BankABI = BankMetaData.ABI

// BankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BankMetaData.Bin instead.
var BankBin = BankMetaData.Bin

// DeployBank deploys a new Ethereum contract, binding an instance of Bank to it.
func DeployBank(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bank, error) {
	parsed, err := BankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BankBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bank{BankCaller: BankCaller{contract: contract}, BankTransactor: BankTransactor{contract: contract}, BankFilterer: BankFilterer{contract: contract}}, nil
}

// Bank is an auto generated Go binding around an Ethereum contract.
type Bank struct {
	BankCaller     // Read-only binding to the contract
	BankTransactor // Write-only binding to the contract
	BankFilterer   // Log filterer for contract events
}

// BankCaller is an auto generated read-only Go binding around an Ethereum contract.
type BankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BankSession struct {
	Contract     *Bank             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BankCallerSession struct {
	Contract *BankCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BankTransactorSession struct {
	Contract     *BankTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BankRaw is an auto generated low-level Go binding around an Ethereum contract.
type BankRaw struct {
	Contract *Bank // Generic contract binding to access the raw methods on
}

// BankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BankCallerRaw struct {
	Contract *BankCaller // Generic read-only contract binding to access the raw methods on
}

// BankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BankTransactorRaw struct {
	Contract *BankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBank creates a new instance of Bank, bound to a specific deployed contract.
func NewBank(address common.Address, backend bind.ContractBackend) (*Bank, error) {
	contract, err := bindBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bank{BankCaller: BankCaller{contract: contract}, BankTransactor: BankTransactor{contract: contract}, BankFilterer: BankFilterer{contract: contract}}, nil
}

// NewBankCaller creates a new read-only instance of Bank, bound to a specific deployed contract.
func NewBankCaller(address common.Address, caller bind.ContractCaller) (*BankCaller, error) {
	contract, err := bindBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BankCaller{contract: contract}, nil
}

// NewBankTransactor creates a new write-only instance of Bank, bound to a specific deployed contract.
func NewBankTransactor(address common.Address, transactor bind.ContractTransactor) (*BankTransactor, error) {
	contract, err := bindBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BankTransactor{contract: contract}, nil
}

// NewBankFilterer creates a new log filterer instance of Bank, bound to a specific deployed contract.
func NewBankFilterer(address common.Address, filterer bind.ContractFilterer) (*BankFilterer, error) {
	contract, err := bindBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BankFilterer{contract: contract}, nil
}

// bindBank binds a generic wrapper to an already deployed contract.
func bindBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bank *BankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bank.Contract.BankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bank *BankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.Contract.BankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bank *BankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bank.Contract.BankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bank *BankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bank *BankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bank *BankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bank.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "AccountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Bank.Contract.AccountBalance(&_Bank.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Bank.Contract.AccountBalance(&_Bank.CallOpts, account)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankCaller) Balance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Balance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankSession) Balance() (*big.Int, error) {
	return _Bank.Contract.Balance(&_Bank.CallOpts)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankCallerSession) Balance() (*big.Int, error) {
	return _Bank.Contract.Balance(&_Bank.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Bank *BankCaller) Nonce(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Nonce", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Bank *BankSession) Nonce(account common.Address) (*big.Int, error) {
	return _Bank.Contract.Nonce(&_Bank.CallOpts, account)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Bank *BankCallerSession) Nonce(account common.Address) (*big.Int, error) {
	return _Bank.Contract.Nonce(&_Bank.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankSession) Owner() (common.Address, error) {
	return _Bank.Contract.Owner(&_Bank.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankCallerSession) Owner() (common.Address, error) {
	return _Bank.Contract.Owner(&_Bank.CallOpts)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Bank *BankTransactor) CancelBetExpired(opts *bind.TransactOpts, betID string) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "CancelBetExpired", betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Bank *BankSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetExpired(&_Bank.TransactOpts, betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Bank *BankTransactorSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetExpired(&_Bank.TransactOpts, betID)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeAmount, uint256 nonce, bytes signature) returns()
func (_Bank *BankTransactor) CancelBetModerator(opts *bind.TransactOpts, betID string, feeAmount *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "CancelBetModerator", betID, feeAmount, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeAmount, uint256 nonce, bytes signature) returns()
func (_Bank *BankSession) CancelBetModerator(betID string, feeAmount *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetModerator(&_Bank.TransactOpts, betID, feeAmount, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeAmount, uint256 nonce, bytes signature) returns()
func (_Bank *BankTransactorSession) CancelBetModerator(betID string, feeAmount *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetModerator(&_Bank.TransactOpts, betID, feeAmount, nonce, signature)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeAmount) returns()
func (_Bank *BankTransactor) CancelBetOwner(opts *bind.TransactOpts, betID string, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "CancelBetOwner", betID, feeAmount)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeAmount) returns()
func (_Bank *BankSession) CancelBetOwner(betID string, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetOwner(&_Bank.TransactOpts, betID, feeAmount)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) CancelBetOwner(betID string, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetOwner(&_Bank.TransactOpts, betID, feeAmount)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeAmount, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankTransactor) CancelBetParticipants(opts *bind.TransactOpts, betID string, feeAmount *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "CancelBetParticipants", betID, feeAmount, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeAmount, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankSession) CancelBetParticipants(betID string, feeAmount *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetParticipants(&_Bank.TransactOpts, betID, feeAmount, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeAmount, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankTransactorSession) CancelBetParticipants(betID string, feeAmount *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.Contract.CancelBetParticipants(&_Bank.TransactOpts, betID, feeAmount, nonces, signatures)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankSession) Deposit() (*types.Transaction, error) {
	return _Bank.Contract.Deposit(&_Bank.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankTransactorSession) Deposit() (*types.Transaction, error) {
	return _Bank.Contract.Deposit(&_Bank.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Bank *BankTransactor) Drain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Drain")
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Bank *BankSession) Drain() (*types.Transaction, error) {
	return _Bank.Contract.Drain(&_Bank.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Bank *BankTransactorSession) Drain() (*types.Transaction, error) {
	return _Bank.Contract.Drain(&_Bank.TransactOpts)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amount, uint256 feeAmount, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankTransactor) PlaceBet(opts *bind.TransactOpts, betID string, amount *big.Int, feeAmount *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "PlaceBet", betID, amount, feeAmount, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amount, uint256 feeAmount, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankSession) PlaceBet(betID string, amount *big.Int, feeAmount *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.Contract.PlaceBet(&_Bank.TransactOpts, betID, amount, feeAmount, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amount, uint256 feeAmount, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Bank *BankTransactorSession) PlaceBet(betID string, amount *big.Int, feeAmount *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Bank.Contract.PlaceBet(&_Bank.TransactOpts, betID, amount, feeAmount, expiration, moderator, participants, nonces, signatures)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Bank *BankTransactor) ReconcileBet(opts *bind.TransactOpts, betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "ReconcileBet", betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Bank *BankSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Bank.Contract.ReconcileBet(&_Bank.TransactOpts, betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Bank *BankTransactorSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Bank.Contract.ReconcileBet(&_Bank.TransactOpts, betID, nonce, signature, winners)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankSession) Withdraw() (*types.Transaction, error) {
	return _Bank.Contract.Withdraw(&_Bank.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Bank.Contract.Withdraw(&_Bank.TransactOpts)
}

// BankEventLogIterator is returned from FilterEventLog and is used to iterate over the raw logs and unpacked data for EventLog events raised by the Bank contract.
type BankEventLogIterator struct {
	Event *BankEventLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BankEventLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BankEventLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BankEventLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BankEventLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BankEventLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BankEventLog represents a EventLog event raised by the Bank contract.
type BankEventLog struct {
	Value string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEventLog is a free log retrieval operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) FilterEventLog(opts *bind.FilterOpts) (*BankEventLogIterator, error) {

	logs, sub, err := _Bank.contract.FilterLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return &BankEventLogIterator{contract: _Bank.contract, event: "EventLog", logs: logs, sub: sub}, nil
}

// WatchEventLog is a free log subscription operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) WatchEventLog(opts *bind.WatchOpts, sink chan<- *BankEventLog) (event.Subscription, error) {

	logs, sub, err := _Bank.contract.WatchLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BankEventLog)
				if err := _Bank.contract.UnpackLog(event, "EventLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventLog is a log parse operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) ParseEventLog(log types.Log) (*BankEventLog, error) {
	event := new(BankEventLog)
	if err := _Bank.contract.UnpackLog(event, "EventLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
