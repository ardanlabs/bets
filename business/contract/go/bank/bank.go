// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bank

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BankMetaData contains all meta data concerning the Bank contract.
var BankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"EventLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Drain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"}],\"name\":\"ExpiredCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"ModeratorCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"OwnerCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"nonce\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"ParticipantCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nonce\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"PlaceBets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betId\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Reconcile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614a49806100606000396000f3fe6080604052600436106100c25760003560e01c80636aebbc9c1161007f578063b4a99a4e11610059578063b4a99a4e1461020e578063d3865af514610239578063e63f341f14610276578063ed21248c146102b3576100c2565b80636aebbc9c146101a05780637d04779b146101c957806393f28237146101f2576100c2565b806309bece4b146100c75780630ef67887146100f057806332646a1a1461011b5780634f76a8d61461014457806357de891a1461016d57806357ea89b614610196575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190612f56565b6102bd565b005b3480156100fc57600080fd5b506101056107ec565b6040516101129190613009565b60405180910390f35b34801561012757600080fd5b50610142600480360381019061013d9190613024565b610836565b005b34801561015057600080fd5b5061016b600480360381019061016691906132ba565b6109ff565b005b34801561017957600080fd5b50610194600480360381019061018f91906133e4565b610f94565b005b61019e611590565b005b3480156101ac57600080fd5b506101c760048036038101906101c291906134a4565b61172b565b005b3480156101d557600080fd5b506101f060048036038101906101eb919061358b565b611a38565b005b61020c600480360381019061020791906135d4565b611c71565b005b34801561021a57600080fd5b50610223611d7d565b6040516102309190613610565b60405180910390f35b34801561024557600080fd5b50610260600480360381019061025b91906135d4565b611da1565b60405161026d9190613009565b60405180910390f35b34801561028257600080fd5b5061029d600480360381019061029891906135d4565b611e46565b6040516102aa9190613009565b60405180910390f35b6102bb611eeb565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031557600080fd5b60006103218683611ff0565b905080600001511561036e5780602001516040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036591906136aa565b60405180910390fd5b60006002876040516103809190613708565b908152602001604051809103902060030154036103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990613791565b60405180910390fd5b6000610484876002896040516103e89190613708565b908152602001604051809103902060010180548060200260200160405190810160405280929190818152602001828054801561047957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161042f575b5050505050886121eb565b9050600080610494838888612229565b915091508060000151156104e35780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da91906136aa565b60405180910390fd5b6002896040516104f39190613708565b908152602001604051809103902060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058990613823565b60405180910390fd5b61059c8289612359565b6105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d29061388f565b60405180910390fd5b600061068c8a60028c6040516105f19190613708565b908152602001604051809103902060010180548060200260200160405190810160405280929190818152602001828054801561068257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610638575b50505050506123a8565b90508060000151156106d95780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d091906136aa565b60405180910390fd5b6107888a60028c6040516106ed9190613708565b908152602001604051809103902060010180548060200260200160405190810160405280929190818152602001828054801561077e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610734575b5050505050612522565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008154809291906107db906138de565b919050555050505050505050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088e57600080fd5b600061089a8383611ff0565b90508060000151156108e75780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108de91906136aa565b60405180910390fd5b60006002846040516108f99190613708565b9081526020016040518091039020600301540361094b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094290613972565b60405180910390fd5b6109fa8360028560405161095f9190613708565b90815260200160405180910390206001018054806020026020016040519081016040528092919081815260200182805480156109f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109a6575b5050505050612522565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a5757600080fd5b8760028a604051610a689190613708565b90815260200160405180910390206001019080519060200190610a8c929190612ca3565b508660028a604051610a9e9190613708565b908152602001604051809103902060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460028a604051610afe9190613708565b9081526020016040518091039020600401819055506000885182610b2291906139c1565b905060005b8951811015610f7e576000610b748c8c8481518110610b4957610b486139f2565b5b60200260200101518c8c8c8c8881518110610b6757610b666139f2565b5b602002602001015161276a565b9050600080610ba783898987818110610b9057610b8f6139f2565b5b9050602002810190610ba29190613a30565b612229565b91509150806000015115610bf65780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bed91906136aa565b60405180910390fd5b8c8481518110610c0957610c086139f2565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7590613adf565b60405180910390fd5b848b610c8a9190613aff565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015610d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0590613b7f565b60405180910390fd5b610d32828a8681518110610d2557610d246139f2565b5b6020026020010151612359565b610d71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6890613beb565b60405180910390fd5b600160028f604051610d839190613708565b908152602001604051809103902060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508a60028f604051610df99190613708565b90815260200160405180910390206003016000828254610e199190613aff565b92505081905550848b610e2c9190613aff565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610e7d9190613c0b565b9250508190555084600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610ef79190613aff565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8e610f29846127b1565b610f328e612974565b604051602001610f4493929190613cd7565b604051602081830303815290604052604051610f6091906136aa565b60405180910390a15050508080610f76906138de565b915050610b27565b50610f8889612afc565b50505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fec57600080fd5b6000610ff88683611ff0565b90508060000151156110455780602001516040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103c91906136aa565b60405180910390fd5b60006002876040516110579190613708565b908152602001604051809103902060030154036110a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a090613791565b60405180910390fd5b600061115a876002896040516110bf9190613708565b908152602001604051809103902060010180548060200260200160405190810160405280929190818152602001828054801561115057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611106575b50505050506123a8565b90508060000151156111a75780602001516040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119e91906136aa565b60405180910390fd5b85516002886040516111b99190613708565b9081526020016040518091039020600101805490501461120e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120590613db6565b60405180910390fd5b60005b86518110156114295760006112e68960028b6040516112309190613708565b90815260200160405180910390206001018054806020026020016040519081016040528092919081815260200182805480156112c157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611277575b50505050508a85815181106112d9576112d86139f2565b5b60200260200101516121eb565b9050600080611319838a8a87818110611302576113016139f2565b5b90506020028101906113149190613a30565b612229565b915091508060000151156113685780602001516040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135f91906136aa565b60405180910390fd5b60028b6040516113789190613708565b908152602001604051809103902060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140a90613e22565b60405180910390fd5b5050508080611421906138de565b915050611211565b506114d98760028960405161143e9190613708565b90815260200160405180910390206001018054806020026020016040519081016040528092919081815260200182805480156114cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611485575b5050505050612522565b6115876002886040516114ec9190613708565b908152602001604051809103902060010180548060200260200160405190810160405280929190818152602001828054801561157d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611533575b5050505050612afc565b50505050505050565b60003390506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000810361161f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161690613e8e565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611665573d6000803e3d6000fd5b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546116b89190613c0b565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6116e9336127b1565b6116f283612974565b604051602001611703929190613efa565b60405160208183030381529060405260405161171f91906136aa565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461178357600080fd5b600061178f8883611ff0565b90508060000151156117dc5780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d391906136aa565b60405180910390fd5b6002886040516117ec9190613708565b908152602001604051809103902060040154421015611840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183790613f97565b60405180910390fd5b60006002896040516118529190613708565b908152602001604051809103902060030154036118a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189b90614003565b60405180910390fd5b6118ae8686612359565b156118ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e59061406f565b60405180910390fd5b60006118fc89898989612b91565b905060008061190c838888612229565b9150915080600001511561195b5780602001516040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195291906136aa565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146119c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c0906140db565b60405180910390fd5b6119d38b8b612522565b600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000815480929190611a26906138de565b91905055505050505050505050505050565b62278d00600282604051611a4c9190613708565b908152602001604051809103902060040154611a689190613aff565b421015611aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa19061416d565b60405180910390fd5b6000600282604051611abc9190613708565b90815260200160405180910390206003015403611b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0590613791565b60405180910390fd5b6000339050600282604051611b239190613708565b908152602001604051809103902060000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb5906141ff565b60405180910390fd5b611c6d82600284604051611bd29190613708565b9081526020016040518091039020600101805480602002602001604051908101604052809291908181526020018280548015611c6357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611c19575b5050505050612522565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cc957600080fd5b600047905060008290508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611d19573d6000803e3d6000fd5b507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611d4483612974565b604051602001611d549190614245565b604051602081830303815290604052604051611d7091906136aa565b60405180910390a1505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dfc57600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ea157600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611f3d9190613aff565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611f6e336127b1565b611fb9600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154612974565b604051602001611fca9291906142c6565b604051602081830303815290604052604051611fe691906136aa565b60405180910390a1565b611ff8612d2d565b816002846040516120099190613708565b9081526020016040518091039020600301541015612128576002836040516120319190613708565b908152602001604051809103902060030154600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546120b59190613aff565b9250508190555060006002846040516120ce9190613708565b9081526020016040518091039020600301819055506121216040518060400160405280601881526020017f62657420706f6f6c20746f6f206c6f7720666f72206665650000000000000000815250612bd2565b90506121e5565b816002846040516121399190613708565b908152602001604051809103902060030160008282546121599190613c0b565b9250508190555081600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546121d39190613aff565b925050819055506121e2612bf9565b90505b92915050565b6000612220848484604051602001612205939291906143f0565b60405160208183030381529060405280519060200120612c2d565b90509392505050565b6000612233612d2d565b6041848490501461228757600061227e6040518060400160405280601881526020017f696e76616c6964207369676e6174757265206c656e6774680000000000000000815250612bd2565b91509150612351565b6000848460009060209261229d9392919061442f565b906122a8919061448c565b9050600085856020906040926122c09392919061442f565b906122cb919061448c565b90506000868660408181106122e3576122e26139f2565b5b9050013560f81c60f81b60f81c9050600188828585604051600081526020016040526040516123159493929190614516565b6020604051602081039080840390855afa158015612337573d6000803e3d6000fd5b50505060206040510351612349612bf9565b945094505050505b935093915050565b600081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414905092915050565b6123b0612d2d565b81516002846040516123c29190613708565b908152602001604051809103902060010180549050146124215761241a6040518060400160405280601481526020017f696e76616c6964207061727469636970616e7473000000000000000000000000815250612bd2565b905061251c565b60005b82518110156125105760028460405161243d9190613708565b90815260200160405180910390206000016000848381518110612463576124626139f2565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166124fd576124f56040518060400160405280601381526020017f696e76616c6964207061727469636970616e7400000000000000000000000000815250612bd2565b91505061251c565b8080612508906138de565b915050612424565b50612519612bf9565b90505b92915050565b600081516002846040516125369190613708565b90815260200160405180910390206003015461255291906139c1565b905060005b82518110156126a2578160016000858481518110612578576125776139f2565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546125cc9190613aff565b92505081905550816002856040516125e49190613708565b908152602001604051809103902060030160008282546126049190613c0b565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a84612650858481518110612643576126426139f2565b5b60200260200101516127b1565b61265985612974565b60405160200161266b93929190614581565b60405160208183030381529060405260405161268791906136aa565b60405180910390a1808061269a906138de565b915050612557565b506002836040516126b39190613708565b908152602001604051809103902060030154600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546127379190613aff565b9250508190555060006002846040516127509190613708565b908152602001604051809103902060030181905550505050565b60006127a587878787878760405160200161278a96959493929190614636565b60405160208183030381529060405280519060200120612c2d565b90509695505050505050565b60606000602867ffffffffffffffff8111156127d0576127cf612d95565b5b6040519080825280601f01601f1916602001820160405280156128025781602001600182028036833780820191505090505b50905060005b601481101561296a5760008160136128209190613c0b565b600861282c91906146a2565b60026128389190614817565b8573ffffffffffffffffffffffffffffffffffffffff1661285991906139c1565b60f81b9050600060108260f81c6128709190614862565b60f81b905060008160f81c60106128879190614893565b8360f81c61289591906148d0565b60f81b90506128a382612c5d565b858560026128b191906146a2565b815181106128c2576128c16139f2565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506128fa81612c5d565b85600186600261290a91906146a2565b6129149190613aff565b81518110612925576129246139f2565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080612962906138de565b915050612808565b5080915050919050565b6060600082036129bb576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612af7565b600082905060005b600082146129ed5780806129d6906138de565b915050600a826129e691906139c1565b91506129c3565b60008167ffffffffffffffff811115612a0957612a08612d95565b5b6040519080825280601f01601f191660200182016040528015612a3b5781602001600182028036833780820191505090505b50905060008290505b60008614612aef57600181612a599190613c0b565b90506000600a8088612a6b91906139c1565b612a7591906146a2565b87612a809190613c0b565b6030612a8c9190614905565b905060008160f81b905080848481518110612aaa57612aa96139f2565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88612ae691906139c1565b97505050612a44565b819450505050505b919050565b60005b8151811015612b8d5760016000838381518110612b1f57612b1e6139f2565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000815480929190612b75906138de565b91905055508080612b85906138de565b915050612aff565b5050565b6000612bc885858585604051602001612bad949392919061493a565b60405160208183030381529060405280519060200120612c2d565b9050949350505050565b612bda612d2d565b6040518060400160405280600115158152602001838152509050919050565b612c01612d2d565b604051806040016040528060001515815260200160405180602001604052806000815250815250905090565b600081604051602001612c4091906149ed565b604051602081830303815290604052805190602001209050919050565b6000600a8260f81c60ff161015612c885760308260f81c612c7e9190614905565b60f81b9050612c9e565b60578260f81c612c989190614905565b60f81b90505b919050565b828054828255906000526020600020908101928215612d1c579160200282015b82811115612d1b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612cc3565b5b509050612d299190612d49565b5090565b6040518060400160405280600015158152602001606081525090565b5b80821115612d62576000816000905550600101612d4a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612dcd82612d84565b810181811067ffffffffffffffff82111715612dec57612deb612d95565b5b80604052505050565b6000612dff612d66565b9050612e0b8282612dc4565b919050565b600067ffffffffffffffff821115612e2b57612e2a612d95565b5b612e3482612d84565b9050602081019050919050565b82818337600083830152505050565b6000612e63612e5e84612e10565b612df5565b905082815260208101848484011115612e7f57612e7e612d7f565b5b612e8a848285612e41565b509392505050565b600082601f830112612ea757612ea6612d7a565b5b8135612eb7848260208601612e50565b91505092915050565b6000819050919050565b612ed381612ec0565b8114612ede57600080fd5b50565b600081359050612ef081612eca565b92915050565b600080fd5b600080fd5b60008083601f840112612f1657612f15612d7a565b5b8235905067ffffffffffffffff811115612f3357612f32612ef6565b5b602083019150836001820283011115612f4f57612f4e612efb565b5b9250929050565b600080600080600060808688031215612f7257612f71612d70565b5b600086013567ffffffffffffffff811115612f9057612f8f612d75565b5b612f9c88828901612e92565b9550506020612fad88828901612ee1565b945050604086013567ffffffffffffffff811115612fce57612fcd612d75565b5b612fda88828901612f00565b93509350506060612fed88828901612ee1565b9150509295509295909350565b61300381612ec0565b82525050565b600060208201905061301e6000830184612ffa565b92915050565b6000806040838503121561303b5761303a612d70565b5b600083013567ffffffffffffffff81111561305957613058612d75565b5b61306585828601612e92565b925050602061307685828601612ee1565b9150509250929050565b600067ffffffffffffffff82111561309b5761309a612d95565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130d7826130ac565b9050919050565b6130e7816130cc565b81146130f257600080fd5b50565b600081359050613104816130de565b92915050565b600061311d61311884613080565b612df5565b905080838252602082019050602084028301858111156131405761313f612efb565b5b835b81811015613169578061315588826130f5565b845260208401935050602081019050613142565b5050509392505050565b600082601f83011261318857613187612d7a565b5b813561319884826020860161310a565b91505092915050565b600067ffffffffffffffff8211156131bc576131bb612d95565b5b602082029050602081019050919050565b60006131e06131db846131a1565b612df5565b9050808382526020820190506020840283018581111561320357613202612efb565b5b835b8181101561322c57806132188882612ee1565b845260208401935050602081019050613205565b5050509392505050565b600082601f83011261324b5761324a612d7a565b5b813561325b8482602086016131cd565b91505092915050565b60008083601f84011261327a57613279612d7a565b5b8235905067ffffffffffffffff81111561329757613296612ef6565b5b6020830191508360208202830111156132b3576132b2612efb565b5b9250929050565b60008060008060008060008060006101008a8c0312156132dd576132dc612d70565b5b60008a013567ffffffffffffffff8111156132fb576132fa612d75565b5b6133078c828d01612e92565b99505060208a013567ffffffffffffffff81111561332857613327612d75565b5b6133348c828d01613173565b98505060406133458c828d016130f5565b97505060606133568c828d01612ee1565b96505060806133678c828d01612ee1565b95505060a08a013567ffffffffffffffff81111561338857613387612d75565b5b6133948c828d01613236565b94505060c08a013567ffffffffffffffff8111156133b5576133b4612d75565b5b6133c18c828d01613264565b935093505060e06133d48c828d01612ee1565b9150509295985092959850929598565b600080600080600060808688031215613400576133ff612d70565b5b600086013567ffffffffffffffff81111561341e5761341d612d75565b5b61342a88828901612e92565b955050602086013567ffffffffffffffff81111561344b5761344a612d75565b5b61345788828901613236565b945050604086013567ffffffffffffffff81111561347857613477612d75565b5b61348488828901613264565b9350935050606061349788828901612ee1565b9150509295509295909350565b600080600080600080600060c0888a0312156134c3576134c2612d70565b5b600088013567ffffffffffffffff8111156134e1576134e0612d75565b5b6134ed8a828b01612e92565b975050602088013567ffffffffffffffff81111561350e5761350d612d75565b5b61351a8a828b01613173565b965050604061352b8a828b016130f5565b955050606061353c8a828b01612ee1565b945050608088013567ffffffffffffffff81111561355d5761355c612d75565b5b6135698a828b01612f00565b935093505060a061357c8a828b01612ee1565b91505092959891949750929550565b6000602082840312156135a1576135a0612d70565b5b600082013567ffffffffffffffff8111156135bf576135be612d75565b5b6135cb84828501612e92565b91505092915050565b6000602082840312156135ea576135e9612d70565b5b60006135f8848285016130f5565b91505092915050565b61360a816130cc565b82525050565b60006020820190506136256000830184613601565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561366557808201518184015260208101905061364a565b60008484015250505050565b600061367c8261362b565b6136868185613636565b9350613696818560208601613647565b61369f81612d84565b840191505092915050565b600060208201905081810360008301526136c48184613671565b905092915050565b600081905092915050565b60006136e28261362b565b6136ec81856136cc565b93506136fc818560208601613647565b80840191505092915050565b600061371482846136d7565b915081905092915050565b7f62657473206d6179206f6e6c792062652063616e63656c656420696620756e7260008201527f65636f6e63696c65640000000000000000000000000000000000000000000000602082015250565b600061377b602983613636565b91506137868261371f565b604082019050919050565b600060208201905081810360008301526137aa8161376e565b9050919050565b7f7369676e657220646f6573206e6f7420686176652074686520617574686f726960008201527f747920746f2063616e63656c2074686520626574000000000000000000000000602082015250565b600061380d603483613636565b9150613818826137b1565b604082019050919050565b6000602082019050818103600083015261383c81613800565b9050919050565b7f696e76616c6964206e6f6e636520666f72206d6f64657261746f720000000000600082015250565b6000613879601b83613636565b915061388482613843565b602082019050919050565b600060208201905081810360008301526138a88161386c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006138e982612ec0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361391b5761391a6138af565b5b600182019050919050565b7f62657420706f6f6c20656d707479000000000000000000000000000000000000600082015250565b600061395c600e83613636565b915061396782613926565b602082019050919050565b6000602082019050818103600083015261398b8161394f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006139cc82612ec0565b91506139d783612ec0565b9250826139e7576139e6613992565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613a4d57613a4c613a21565b5b80840192508235915067ffffffffffffffff821115613a6f57613a6e613a26565b5b602083019250600182023603831315613a8b57613a8a613a2b565b5b509250929050565b7f696e76616c6964207061727469636970616e7400000000000000000000000000600082015250565b6000613ac9601383613636565b9150613ad482613a93565b602082019050919050565b60006020820190508181036000830152613af881613abc565b9050919050565b6000613b0a82612ec0565b9150613b1583612ec0565b9250828201905080821115613b2d57613b2c6138af565b5b92915050565b7f696e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000613b69601283613636565b9150613b7482613b33565b602082019050919050565b60006020820190508181036000830152613b9881613b5c565b9050919050565b7f696e76616c6964206e6f6e636520666f72207061727469636970616e74000000600082015250565b6000613bd5601d83613636565b9150613be082613b9f565b602082019050919050565b60006020820190508181036000830152613c0481613bc8565b9050919050565b6000613c1682612ec0565b9150613c2183612ec0565b9250828203905081811115613c3957613c386138af565b5b92915050565b7f62657449645b0000000000000000000000000000000000000000000000000000815250565b7f5d20706172745b00000000000000000000000000000000000000000000000000815250565b7f5d206265745b0000000000000000000000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b6000613ce282613c3f565b600682019150613cf282866136d7565b9150613cfd82613c65565b600782019150613d0d82856136d7565b9150613d1882613c8b565b600682019150613d2882846136d7565b9150613d3382613cb1565b600182019150819050949350505050565b7f616c6c207061727469636970616e7473206d757374207369676e20746f20616260008201527f6f72740000000000000000000000000000000000000000000000000000000000602082015250565b6000613da0602383613636565b9150613dab82613d44565b604082019050919050565b60006020820190508181036000830152613dcf81613d93565b9050919050565b7f696e76616c6964207369676e6572000000000000000000000000000000000000600082015250565b6000613e0c600e83613636565b9150613e1782613dd6565b602082019050919050565b60006020820190508181036000830152613e3b81613dff565b9050919050565b7f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b6000613e78601283613636565b9150613e8382613e42565b602082019050919050565b60006020820190508181036000830152613ea781613e6b565b9050919050565b7f77697468647261775b0000000000000000000000000000000000000000000000815250565b7f5d20616d6f756e745b0000000000000000000000000000000000000000000000815250565b6000613f0582613eae565b600982019150613f1582856136d7565b9150613f2082613ed4565b600982019150613f3082846136d7565b9150613f3b82613cb1565b6001820191508190509392505050565b7f62657420686173206e6f74207965742065787069726564000000000000000000600082015250565b6000613f81601783613636565b9150613f8c82613f4b565b602082019050919050565b60006020820190508181036000830152613fb081613f74565b9050919050565b7f62657420697320616c7265616479207265636f6e63696c656400000000000000600082015250565b6000613fed601983613636565b9150613ff882613fb7565b602082019050919050565b6000602082019050818103600083015261401c81613fe0565b9050919050565b7f6d6f64657261746f72206e6f6e636520697320696e76616c6964000000000000600082015250565b6000614059601a83613636565b915061406482614023565b602082019050919050565b600060208201905081810360008301526140888161404c565b9050919050565b7f696e76616c6964206d6f64657261746f72207369676e61747572650000000000600082015250565b60006140c5601b83613636565b91506140d08261408f565b602082019050919050565b600060208201905081810360008301526140f4816140b8565b9050919050565b7f62657473206d6179206f6e6c792062652063616e63656c65642033302b20646160008201527f79732061667465722065787069726174696f6e00000000000000000000000000602082015250565b6000614157603383613636565b9150614162826140fb565b604082019050919050565b600060208201905081810360008301526141868161414a565b9050919050565b7f63616e63656c6572206973206e6f7420617574686f72697a656420746f20636160008201527f6e63656c20746869732062657400000000000000000000000000000000000000602082015250565b60006141e9602d83613636565b91506141f48261418d565b604082019050919050565b60006020820190508181036000830152614218816141dc565b9050919050565b7f7472616e736665725b0000000000000000000000000000000000000000000000815250565b60006142508261421f565b60098201915061426082846136d7565b915061426b82613cb1565b60018201915081905092915050565b7f6465706f7369745b000000000000000000000000000000000000000000000000815250565b7f5d2062616c616e63655b00000000000000000000000000000000000000000000815250565b60006142d18261427a565b6008820191506142e182856136d7565b91506142ec826142a0565b600a820191506142fc82846136d7565b915061430782613cb1565b6001820191508190509392505050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b614346816130cc565b82525050565b6000614358838361433d565b60208301905092915050565b6000602082019050919050565b600061437c82614317565b6143868185614322565b93506143918361432d565b8060005b838110156143c25781516143a9888261434c565b97506143b483614364565b925050600181019050614395565b5085935050505092915050565b6000819050919050565b6143ea6143e582612ec0565b6143cf565b82525050565b60006143fc82866136d7565b91506144088285614371565b915061441482846143d9565b602082019150819050949350505050565b600080fd5b600080fd5b6000808585111561444357614442614425565b5b838611156144545761445361442a565b5b6001850283019150848603905094509492505050565b600082905092915050565b6000819050919050565b600082821b905092915050565b6000614498838361446a565b826144a38135614475565b925060208210156144e3576144de7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261447f565b831692505b505092915050565b6144f481614475565b82525050565b600060ff82169050919050565b614510816144fa565b82525050565b600060808201905061452b60008301876144eb565b6145386020830186614507565b61454560408301856144eb565b61455260608301846144eb565b95945050505050565b7f5d207061727469636970616e745b000000000000000000000000000000000000815250565b600061458c82613c3f565b60068201915061459c82866136d7565b91506145a78261455b565b600e820191506145b782856136d7565b91506145c282613ed4565b6009820191506145d282846136d7565b91506145dd82613cb1565b600182019150819050949350505050565b60008160601b9050919050565b6000614606826145ee565b9050919050565b6000614618826145fb565b9050919050565b61463061462b826130cc565b61460d565b82525050565b600061464282896136d7565b915061464e828861461f565b60148201915061465e828761461f565b60148201915061466e82866143d9565b60208201915061467e82856143d9565b60208201915061468e82846143d9565b602082019150819050979650505050505050565b60006146ad82612ec0565b91506146b883612ec0565b92508282026146c681612ec0565b915082820484148315176146dd576146dc6138af565b5b5092915050565b60008160011c9050919050565b6000808291508390505b600185111561473b57808604811115614717576147166138af565b5b60018516156147265780820291505b8081029050614734856146e4565b94506146fb565b94509492505050565b6000826147545760019050614810565b816147625760009050614810565b81600181146147785760028114614782576147b1565b6001915050614810565b60ff841115614794576147936138af565b5b8360020a9150848211156147ab576147aa6138af565b5b50614810565b5060208310610133831016604e8410600b84101617156147e65782820a9050838111156147e1576147e06138af565b5b614810565b6147f384848460016146f1565b9250905081840481111561480a576148096138af565b5b81810290505b9392505050565b600061482282612ec0565b915061482d83612ec0565b925061485a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614744565b905092915050565b600061486d826144fa565b9150614878836144fa565b92508261488857614887613992565b5b828204905092915050565b600061489e826144fa565b91506148a9836144fa565b92508282026148b7816144fa565b91508082146148c9576148c86138af565b5b5092915050565b60006148db826144fa565b91506148e6836144fa565b9250828203905060ff8111156148ff576148fe6138af565b5b92915050565b6000614910826144fa565b915061491b836144fa565b9250828201905060ff811115614934576149336138af565b5b92915050565b600061494682876136d7565b91506149528286614371565b915061495e828561461f565b60148201915061496e82846143d9565b60208201915081905095945050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006149b6601c836136cc565b91506149c182614980565b601c82019050919050565b6000819050919050565b6149e76149e282614475565b6149cc565b82525050565b60006149f8826149a9565b9150614a0482846149d6565b6020820191508190509291505056fea26469706673582212202981879b792cede856d2a42f08c51c914725dccf0fe09709dc4f6e082237f12864736f6c63430008110033",
}

// BankABI is the input ABI used to generate the binding from.
// Deprecated: Use BankMetaData.ABI instead.
var BankABI = BankMetaData.ABI

// BankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BankMetaData.Bin instead.
var BankBin = BankMetaData.Bin

// DeployBank deploys a new Ethereum contract, binding an instance of Bank to it.
func DeployBank(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bank, error) {
	parsed, err := BankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BankBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bank{BankCaller: BankCaller{contract: contract}, BankTransactor: BankTransactor{contract: contract}, BankFilterer: BankFilterer{contract: contract}}, nil
}

// Bank is an auto generated Go binding around an Ethereum contract.
type Bank struct {
	BankCaller     // Read-only binding to the contract
	BankTransactor // Write-only binding to the contract
	BankFilterer   // Log filterer for contract events
}

// BankCaller is an auto generated read-only Go binding around an Ethereum contract.
type BankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BankSession struct {
	Contract     *Bank             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BankCallerSession struct {
	Contract *BankCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BankTransactorSession struct {
	Contract     *BankTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BankRaw is an auto generated low-level Go binding around an Ethereum contract.
type BankRaw struct {
	Contract *Bank // Generic contract binding to access the raw methods on
}

// BankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BankCallerRaw struct {
	Contract *BankCaller // Generic read-only contract binding to access the raw methods on
}

// BankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BankTransactorRaw struct {
	Contract *BankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBank creates a new instance of Bank, bound to a specific deployed contract.
func NewBank(address common.Address, backend bind.ContractBackend) (*Bank, error) {
	contract, err := bindBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bank{BankCaller: BankCaller{contract: contract}, BankTransactor: BankTransactor{contract: contract}, BankFilterer: BankFilterer{contract: contract}}, nil
}

// NewBankCaller creates a new read-only instance of Bank, bound to a specific deployed contract.
func NewBankCaller(address common.Address, caller bind.ContractCaller) (*BankCaller, error) {
	contract, err := bindBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BankCaller{contract: contract}, nil
}

// NewBankTransactor creates a new write-only instance of Bank, bound to a specific deployed contract.
func NewBankTransactor(address common.Address, transactor bind.ContractTransactor) (*BankTransactor, error) {
	contract, err := bindBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BankTransactor{contract: contract}, nil
}

// NewBankFilterer creates a new log filterer instance of Bank, bound to a specific deployed contract.
func NewBankFilterer(address common.Address, filterer bind.ContractFilterer) (*BankFilterer, error) {
	contract, err := bindBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BankFilterer{contract: contract}, nil
}

// bindBank binds a generic wrapper to an already deployed contract.
func bindBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bank *BankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bank.Contract.BankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bank *BankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.Contract.BankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bank *BankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bank.Contract.BankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bank *BankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bank *BankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bank *BankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bank.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "AccountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Bank.Contract.AccountBalance(&_Bank.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Bank *BankCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Bank.Contract.AccountBalance(&_Bank.CallOpts, account)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankCaller) Balance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Balance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankSession) Balance() (*big.Int, error) {
	return _Bank.Contract.Balance(&_Bank.CallOpts)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Bank *BankCallerSession) Balance() (*big.Int, error) {
	return _Bank.Contract.Balance(&_Bank.CallOpts)
}

// GetNonce is a free data retrieval call binding the contract method 0xd3865af5.
//
// Solidity: function GetNonce(address account) view returns(uint256)
func (_Bank *BankCaller) GetNonce(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "GetNonce", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0xd3865af5.
//
// Solidity: function GetNonce(address account) view returns(uint256)
func (_Bank *BankSession) GetNonce(account common.Address) (*big.Int, error) {
	return _Bank.Contract.GetNonce(&_Bank.CallOpts, account)
}

// GetNonce is a free data retrieval call binding the contract method 0xd3865af5.
//
// Solidity: function GetNonce(address account) view returns(uint256)
func (_Bank *BankCallerSession) GetNonce(account common.Address) (*big.Int, error) {
	return _Bank.Contract.GetNonce(&_Bank.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bank.contract.Call(opts, &out, "Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankSession) Owner() (common.Address, error) {
	return _Bank.Contract.Owner(&_Bank.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Bank *BankCallerSession) Owner() (common.Address, error) {
	return _Bank.Contract.Owner(&_Bank.CallOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankSession) Deposit() (*types.Transaction, error) {
	return _Bank.Contract.Deposit(&_Bank.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Bank *BankTransactorSession) Deposit() (*types.Transaction, error) {
	return _Bank.Contract.Deposit(&_Bank.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0x93f28237.
//
// Solidity: function Drain(address target) payable returns()
func (_Bank *BankTransactor) Drain(opts *bind.TransactOpts, target common.Address) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Drain", target)
}

// Drain is a paid mutator transaction binding the contract method 0x93f28237.
//
// Solidity: function Drain(address target) payable returns()
func (_Bank *BankSession) Drain(target common.Address) (*types.Transaction, error) {
	return _Bank.Contract.Drain(&_Bank.TransactOpts, target)
}

// Drain is a paid mutator transaction binding the contract method 0x93f28237.
//
// Solidity: function Drain(address target) payable returns()
func (_Bank *BankTransactorSession) Drain(target common.Address) (*types.Transaction, error) {
	return _Bank.Contract.Drain(&_Bank.TransactOpts, target)
}

// ExpiredCancel is a paid mutator transaction binding the contract method 0x7d04779b.
//
// Solidity: function ExpiredCancel(string betId) returns()
func (_Bank *BankTransactor) ExpiredCancel(opts *bind.TransactOpts, betId string) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "ExpiredCancel", betId)
}

// ExpiredCancel is a paid mutator transaction binding the contract method 0x7d04779b.
//
// Solidity: function ExpiredCancel(string betId) returns()
func (_Bank *BankSession) ExpiredCancel(betId string) (*types.Transaction, error) {
	return _Bank.Contract.ExpiredCancel(&_Bank.TransactOpts, betId)
}

// ExpiredCancel is a paid mutator transaction binding the contract method 0x7d04779b.
//
// Solidity: function ExpiredCancel(string betId) returns()
func (_Bank *BankTransactorSession) ExpiredCancel(betId string) (*types.Transaction, error) {
	return _Bank.Contract.ExpiredCancel(&_Bank.TransactOpts, betId)
}

// ModeratorCancel is a paid mutator transaction binding the contract method 0x09bece4b.
//
// Solidity: function ModeratorCancel(string betId, uint256 nonce, bytes signature, uint256 feeAmount) returns()
func (_Bank *BankTransactor) ModeratorCancel(opts *bind.TransactOpts, betId string, nonce *big.Int, signature []byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "ModeratorCancel", betId, nonce, signature, feeAmount)
}

// ModeratorCancel is a paid mutator transaction binding the contract method 0x09bece4b.
//
// Solidity: function ModeratorCancel(string betId, uint256 nonce, bytes signature, uint256 feeAmount) returns()
func (_Bank *BankSession) ModeratorCancel(betId string, nonce *big.Int, signature []byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.ModeratorCancel(&_Bank.TransactOpts, betId, nonce, signature, feeAmount)
}

// ModeratorCancel is a paid mutator transaction binding the contract method 0x09bece4b.
//
// Solidity: function ModeratorCancel(string betId, uint256 nonce, bytes signature, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) ModeratorCancel(betId string, nonce *big.Int, signature []byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.ModeratorCancel(&_Bank.TransactOpts, betId, nonce, signature, feeAmount)
}

// OwnerCancel is a paid mutator transaction binding the contract method 0x32646a1a.
//
// Solidity: function OwnerCancel(string betId, uint256 feeAmount) returns()
func (_Bank *BankTransactor) OwnerCancel(opts *bind.TransactOpts, betId string, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "OwnerCancel", betId, feeAmount)
}

// OwnerCancel is a paid mutator transaction binding the contract method 0x32646a1a.
//
// Solidity: function OwnerCancel(string betId, uint256 feeAmount) returns()
func (_Bank *BankSession) OwnerCancel(betId string, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.OwnerCancel(&_Bank.TransactOpts, betId, feeAmount)
}

// OwnerCancel is a paid mutator transaction binding the contract method 0x32646a1a.
//
// Solidity: function OwnerCancel(string betId, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) OwnerCancel(betId string, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.OwnerCancel(&_Bank.TransactOpts, betId, feeAmount)
}

// ParticipantCancel is a paid mutator transaction binding the contract method 0x57de891a.
//
// Solidity: function ParticipantCancel(string betId, uint256[] nonce, bytes[] signatures, uint256 feeAmount) returns()
func (_Bank *BankTransactor) ParticipantCancel(opts *bind.TransactOpts, betId string, nonce []*big.Int, signatures [][]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "ParticipantCancel", betId, nonce, signatures, feeAmount)
}

// ParticipantCancel is a paid mutator transaction binding the contract method 0x57de891a.
//
// Solidity: function ParticipantCancel(string betId, uint256[] nonce, bytes[] signatures, uint256 feeAmount) returns()
func (_Bank *BankSession) ParticipantCancel(betId string, nonce []*big.Int, signatures [][]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.ParticipantCancel(&_Bank.TransactOpts, betId, nonce, signatures, feeAmount)
}

// ParticipantCancel is a paid mutator transaction binding the contract method 0x57de891a.
//
// Solidity: function ParticipantCancel(string betId, uint256[] nonce, bytes[] signatures, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) ParticipantCancel(betId string, nonce []*big.Int, signatures [][]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.ParticipantCancel(&_Bank.TransactOpts, betId, nonce, signatures, feeAmount)
}

// PlaceBets is a paid mutator transaction binding the contract method 0x4f76a8d6.
//
// Solidity: function PlaceBets(string betId, address[] participants, address moderator, uint256 amount, uint256 expiration, uint256[] nonce, bytes[] signatures, uint256 feeAmount) returns()
func (_Bank *BankTransactor) PlaceBets(opts *bind.TransactOpts, betId string, participants []common.Address, moderator common.Address, amount *big.Int, expiration *big.Int, nonce []*big.Int, signatures [][]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "PlaceBets", betId, participants, moderator, amount, expiration, nonce, signatures, feeAmount)
}

// PlaceBets is a paid mutator transaction binding the contract method 0x4f76a8d6.
//
// Solidity: function PlaceBets(string betId, address[] participants, address moderator, uint256 amount, uint256 expiration, uint256[] nonce, bytes[] signatures, uint256 feeAmount) returns()
func (_Bank *BankSession) PlaceBets(betId string, participants []common.Address, moderator common.Address, amount *big.Int, expiration *big.Int, nonce []*big.Int, signatures [][]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.PlaceBets(&_Bank.TransactOpts, betId, participants, moderator, amount, expiration, nonce, signatures, feeAmount)
}

// PlaceBets is a paid mutator transaction binding the contract method 0x4f76a8d6.
//
// Solidity: function PlaceBets(string betId, address[] participants, address moderator, uint256 amount, uint256 expiration, uint256[] nonce, bytes[] signatures, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) PlaceBets(betId string, participants []common.Address, moderator common.Address, amount *big.Int, expiration *big.Int, nonce []*big.Int, signatures [][]byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.PlaceBets(&_Bank.TransactOpts, betId, participants, moderator, amount, expiration, nonce, signatures, feeAmount)
}

// Reconcile is a paid mutator transaction binding the contract method 0x6aebbc9c.
//
// Solidity: function Reconcile(string betId, address[] winners, address moderator, uint256 nonce, bytes signature, uint256 feeAmount) returns()
func (_Bank *BankTransactor) Reconcile(opts *bind.TransactOpts, betId string, winners []common.Address, moderator common.Address, nonce *big.Int, signature []byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Reconcile", betId, winners, moderator, nonce, signature, feeAmount)
}

// Reconcile is a paid mutator transaction binding the contract method 0x6aebbc9c.
//
// Solidity: function Reconcile(string betId, address[] winners, address moderator, uint256 nonce, bytes signature, uint256 feeAmount) returns()
func (_Bank *BankSession) Reconcile(betId string, winners []common.Address, moderator common.Address, nonce *big.Int, signature []byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.Reconcile(&_Bank.TransactOpts, betId, winners, moderator, nonce, signature, feeAmount)
}

// Reconcile is a paid mutator transaction binding the contract method 0x6aebbc9c.
//
// Solidity: function Reconcile(string betId, address[] winners, address moderator, uint256 nonce, bytes signature, uint256 feeAmount) returns()
func (_Bank *BankTransactorSession) Reconcile(betId string, winners []common.Address, moderator common.Address, nonce *big.Int, signature []byte, feeAmount *big.Int) (*types.Transaction, error) {
	return _Bank.Contract.Reconcile(&_Bank.TransactOpts, betId, winners, moderator, nonce, signature, feeAmount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bank.contract.Transact(opts, "Withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankSession) Withdraw() (*types.Transaction, error) {
	return _Bank.Contract.Withdraw(&_Bank.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Bank *BankTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Bank.Contract.Withdraw(&_Bank.TransactOpts)
}

// BankEventLogIterator is returned from FilterEventLog and is used to iterate over the raw logs and unpacked data for EventLog events raised by the Bank contract.
type BankEventLogIterator struct {
	Event *BankEventLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BankEventLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BankEventLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BankEventLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BankEventLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BankEventLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BankEventLog represents a EventLog event raised by the Bank contract.
type BankEventLog struct {
	Value string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEventLog is a free log retrieval operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) FilterEventLog(opts *bind.FilterOpts) (*BankEventLogIterator, error) {

	logs, sub, err := _Bank.contract.FilterLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return &BankEventLogIterator{contract: _Bank.contract, event: "EventLog", logs: logs, sub: sub}, nil
}

// WatchEventLog is a free log subscription operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) WatchEventLog(opts *bind.WatchOpts, sink chan<- *BankEventLog) (event.Subscription, error) {

	logs, sub, err := _Bank.contract.WatchLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BankEventLog)
				if err := _Bank.contract.UnpackLog(event, "EventLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventLog is a log parse operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Bank *BankFilterer) ParseEventLog(log types.Log) (*BankEventLog, error) {
	event := new(BankEventLog)
	if err := _Bank.contract.UnpackLog(event, "EventLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
