// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package book

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BookBetInfo is an auto generated low-level Go binding around an user-defined struct.
type BookBetInfo struct {
	State        uint8
	Participants []common.Address
	Moderator    common.Address
	AmountWei    *big.Int
	Expiration   *big.Int
}

// BookMetaData contains all meta data concerning the Book contract.
var BookMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"EventLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"BetDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"State\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"Participants\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Moderator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AmountWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Expiration\",\"type\":\"uint256\"}],\"internalType\":\"structBook.BetInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"CancelBetExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"CancelBetModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"}],\"name\":\"CancelBetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"CancelBetParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Drain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountBetWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"PlaceBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"ReconcileBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614c6f806100606000396000f3fe6080604052600436106100dd5760003560e01c80637c64ce361161007f578063e2a06aca11610059578063e2a06aca1461026a578063e63f341f14610293578063ed21248c146102d0578063f8856b88146102da576100dd565b80637c64ce361461020c578063b4a99a4e14610235578063d67a073f14610260576100dd565b8063221da6a5116100bb578063221da6a51461015f57806330d0cee914610188578063364529e5146101c557806357ea89b614610202576100dd565b80630e302132146100e25780630ee216b71461010b5780630ef6788714610134575b600080fd5b3480156100ee57600080fd5b50610109600480360381019061010491906132d7565b610303565b005b34801561011757600080fd5b50610132600480360381019061012d9190613397565b6108d4565b005b34801561014057600080fd5b50610149610b8b565b6040516101569190613402565b60405180910390f35b34801561016b57600080fd5b5061018660048036038101906101819190613536565b610bd5565b005b34801561019457600080fd5b506101af60048036038101906101aa91906135f6565b6111e1565b6040516101bc9190613402565b60405180910390f35b3480156101d157600080fd5b506101ec60048036038101906101e79190613623565b611286565b6040516101f991906137cb565b60405180910390f35b61020a6114a8565b005b34801561021857600080fd5b50610233600480360381019061022e91906137ed565b611643565b005b34801561024157600080fd5b5061024a611b72565b60405161025791906138a0565b60405180910390f35b610268611b96565b005b34801561027657600080fd5b50610291600480360381019061028c91906138bb565b611cab565b005b34801561029f57600080fd5b506102ba60048036038101906102b591906135f6565b6124c9565b6040516102c79190613402565b60405180910390f35b6102d861256e565b005b3480156102e657600080fd5b5061030160048036038101906102fc9190613623565b612673565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035b57600080fd5b600060028660405161036d9190613a56565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff16146103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d190613aca565b60405180910390fd5b8060000160040154421015610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041b90613b36565b60405180910390fd5b84600160008360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154146104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c690613ba2565b60405180910390fd5b6000868260000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405160200161050d93929190613bfb565b604051602081830303815290604052805190602001209050600080610533838888612936565b915091508060000151156105825780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105799190613c39565b60405180910390fd5b8360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90613ca7565b60405180910390fd5b8451846000016001018054905014610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b90613d13565b60405180910390fd5b60005b855181101561072b5784600501600087838151811061068957610688613d33565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f90613dae565b60405180910390fd5b808061072390613dfd565b915050610667565b5060005b85518110156107c55784600001600301546001600088848151811061075757610756613d33565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546107ab9190613e45565b9250508190555080806107bd90613dfd565b91505061072f565b50600160008560000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600081548092919061084090613dfd565b919050555060028460000160000160006101000a81548160ff021916908360ff160217905550600084600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a896040516020016108a59190613e9f565b6040516020818303038152906040526040516108c19190613c39565b60405180910390a1505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461092c57600080fd5b600060028360405161093e9190613a56565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff16146109ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a290613aca565b60405180910390fd5b60008282600001600301546109c09190613ec5565b905060005b8260000160010180549050811015610b005781600160008560000160010184815481106109f5576109f4613d33565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610a6c9190613e45565b9250508190555083600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610ae69190613e45565b925050819055508080610af890613dfd565b9150506109c5565b5060038260000160000160006101000a81548160ff021916908360ff160217905550600082600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a84604051602001610b619190613f1f565b604051602081830303815290604052604051610b7d9190613c39565b60405180910390a150505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c2d57600080fd5b6000600286604051610c3f9190613a56565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff1614610cac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca390613aca565b60405180910390fd5b828290508160000160010180549050141580610cd357508351816000016001018054905014155b15610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a90613fb7565b60405180910390fd5b60005b8160000160010180549050811015610ffd576000826000016001018281548110610d4357610d42613d33565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000868381518110610d8557610d84613d33565b5b60200260200101519050366000878786818110610da557610da4613d33565b5b9050602002810190610db79190613fe6565b9150915082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414610e6857610e0d84612acf565b604051602001610e1d919061406f565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5f9190613c39565b60405180910390fd5b60008b8585604051602001610e7f93929190613bfb565b604051602081830303815290604052805190602001209050600080610ea5838686612936565b91509150806000015115610ef45780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eeb9190613c39565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610f8b57610f3087612acf565b604051602001610f4091906140bb565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f829190613c39565b60405180910390fd5b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190610fde90613dfd565b9190505550505050505050508080610ff590613dfd565b915050610d16565b5060008582600001600301546110139190613ec5565b905060005b826000016001018054905081101561115357816001600085600001600101848154811061104857611047613d33565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546110bf9190613e45565b9250508190555086600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546111399190613e45565b92505081905550808061114b90613dfd565b915050611018565b5060038260000160000160006101000a81548160ff021916908360ff160217905550600082600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a876040516020016111b49190614153565b6040516020818303038152906040526040516111d09190613c39565b60405180910390a150505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461123c57600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b61128e612ebb565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112e657600080fd5b600060ff166002836040516112fb9190613a56565b908152602001604051809103902060000160000160009054906101000a900460ff1660ff1603611360576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611357906141c1565b60405180910390fd5b6002826040516113709190613a56565b90815260200160405180910390206000016040518060a00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561142e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116113e4575b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815250509050919050565b60003390506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060008103611537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152e9061422d565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561157d573d6000803e3d6000fd5b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546115d09190613ec5565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a61160133612acf565b61160a83612c92565b60405160200161161b9291906142bf565b6040516020818303038152906040526040516116379190613c39565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461169b57600080fd5b60006002866040516116ad9190613a56565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff161461171a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171190613aca565b60405180910390fd5b83600160008360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154146117c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bc90613ba2565b60405180910390fd5b6000868260000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660405160200161180393929190613bfb565b604051602081830303815290604052805190602001209050600080611829838787612936565b915091508060000151156118785780602001516040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186f9190613c39565b60405180910390fd5b8360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461190d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190490613ca7565b60405180910390fd5b60008885600001600301546119229190613ec5565b905060005b8560000160010180549050811015611a6257816001600088600001600101848154811061195757611956613d33565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546119ce9190613e45565b9250508190555089600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611a489190613e45565b925050819055508080611a5a90613dfd565b915050611927565b50600160008660000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190611add90613dfd565b919050555060038560000160000160006101000a81548160ff021916908360ff160217905550600085600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a604051602001611b429190614336565b604051602081830303815290604052604051611b5e9190613c39565b60405180910390a150505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bee57600080fd5b600033905060004790508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611c3e573d6000803e3d6000fd5b507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611c6983612acf565b611c7283612c92565b604051602001611c83929190614382565b604051602081830303815290604052604051611c9f9190613c39565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d0357600080fd5b600060ff1660028a604051611d189190613a56565b908152602001604051809103902060000160000160009054906101000a900460ff1660ff1614611d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d749061441f565b60405180910390fd5b60008789611d8b9190613e45565b905060005b855181101561209b576000868281518110611dae57611dad613d33565b5b602002602001015190506000868381518110611dcd57611dcc613d33565b5b60200260200101519050366000878786818110611ded57611dec613d33565b5b9050602002810190611dff9190613fe6565b9150915085600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015611eb157611e5684612acf565b604051602001611e669190614465565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea89190613c39565b60405180910390fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414611f5e57611f0384612acf565b604051602001611f1391906144b1565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f559190613c39565b60405180910390fd5b60008f8585604051602001611f7593929190613bfb565b604051602081830303815290604052805190602001209050600080611f9b838686612936565b91509150806000015115611fea5780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe19190613c39565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146120815761202687612acf565b60405160200161203691906140bb565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120789190613c39565b60405180910390fd5b50505050505050808061209390613dfd565b915050611d90565b506040518060a00160405280600160ff1681526020018681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018881525060028b6040516120ed9190613a56565b908152602001604051809103902060000160008201518160000160006101000a81548160ff021916908360ff160217905550602082015181600101908051906020019061213b929190612f03565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015590505060005b855181101561237b5760008682815181106121bb576121ba613d33565b5b6020026020010151905082600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546122179190613ec5565b92505081905550600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600081548092919061227190613dfd565b919050555089600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546122e99190613e45565b92505081905550600160028d6040516123029190613a56565b908152602001604051809103902060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050808061237390613dfd565b91505061219d565b50600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16612467576040518060600160405280600115158152602001600081526020016000815250600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201559050505b7fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a60405160200161249991906144fd565b6040516020818303038152906040526040516124b59190613c39565b60405180910390a150505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461252457600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546125c09190613e45565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6125f133612acf565b61263c600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612c92565b60405160200161264d92919061456f565b6040516020818303038152906040526040516126699190613c39565b60405180910390a1565b60006002826040516126859190613a56565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff16146126f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e990613aca565b60405180910390fd5b62278d0081600001600401546127089190613e45565b42101561274a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274190614632565b60405180910390fd5b8060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166127d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127cf906146c4565b60405180910390fd5b60005b81600001600101805490508110156128a35781600001600301546001600084600001600101848154811061281257612811613d33565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546128899190613e45565b92505081905550808061289b90613dfd565b9150506127db565b5060038160000160000160006101000a81548160ff021916908360ff160217905550600081600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a826128fd33612acf565b60405160200161290e929190614730565b60405160208183030381529060405260405161292a9190613c39565b60405180910390a15050565b6000612940612f8d565b6041848490501461299457600061298b6040518060400160405280601881526020017f696e76616c6964207369676e6174757265206c656e6774680000000000000000815250612e1a565b91509150612ac7565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081876040516020016129e39291906147e4565b60405160208183030381529060405280519060200120905060008686600090602092612a1193929190614816565b90612a1c9190614869565b905060008787602090604092612a3493929190614816565b90612a3f9190614869565b9050600088886040818110612a5757612a56613d33565b5b9050013560f81c60f81b60f81c905060018482858560405160008152602001604052604051612a8994939291906148e6565b6020604051602081039080840390855afa158015612aab573d6000803e3d6000fd5b50505060206040510351612abd612e41565b9650965050505050505b935093915050565b60606000602867ffffffffffffffff811115612aee57612aed612ff5565b5b6040519080825280601f01601f191660200182016040528015612b205781602001600182028036833780820191505090505b50905060005b6014811015612c88576000816013612b3e9190613ec5565b6008612b4a919061492b565b6002612b569190614ab8565b8573ffffffffffffffffffffffffffffffffffffffff16612b779190614b32565b60f81b9050600060108260f81c612b8e9190614b63565b60f81b905060008160f81c6010612ba59190614b94565b8360f81c612bb39190614bcf565b60f81b9050612bc182612e75565b85856002612bcf919061492b565b81518110612be057612bdf613d33565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612c1881612e75565b856001866002612c28919061492b565b612c329190613e45565b81518110612c4357612c42613d33565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080612c8090613dfd565b915050612b26565b5080915050919050565b606060008203612cd9576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612e15565b600082905060005b60008214612d0b578080612cf490613dfd565b915050600a82612d049190614b32565b9150612ce1565b60008167ffffffffffffffff811115612d2757612d26612ff5565b5b6040519080825280601f01601f191660200182016040528015612d595781602001600182028036833780820191505090505b50905060008290505b60008614612e0d57600181612d779190613ec5565b90506000600a8088612d899190614b32565b612d93919061492b565b87612d9e9190613ec5565b6030612daa9190614c04565b905060008160f81b905080848481518110612dc857612dc7613d33565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88612e049190614b32565b97505050612d62565b819450505050505b919050565b612e22612f8d565b6040518060400160405280600115158152602001838152509050919050565b612e49612f8d565b604051806040016040528060001515815260200160405180602001604052806000815250815250905090565b6000600a8260f81c60ff161015612ea05760308260f81c612e969190614c04565b60f81b9050612eb6565b60578260f81c612eb09190614c04565b60f81b90505b919050565b6040518060a00160405280600060ff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b828054828255906000526020600020908101928215612f7c579160200282015b82811115612f7b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612f23565b5b509050612f899190612fa9565b5090565b6040518060400160405280600015158152602001606081525090565b5b80821115612fc2576000816000905550600101612faa565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61302d82612fe4565b810181811067ffffffffffffffff8211171561304c5761304b612ff5565b5b80604052505050565b600061305f612fc6565b905061306b8282613024565b919050565b600067ffffffffffffffff82111561308b5761308a612ff5565b5b61309482612fe4565b9050602081019050919050565b82818337600083830152505050565b60006130c36130be84613070565b613055565b9050828152602081018484840111156130df576130de612fdf565b5b6130ea8482856130a1565b509392505050565b600082601f83011261310757613106612fda565b5b81356131178482602086016130b0565b91505092915050565b6000819050919050565b61313381613120565b811461313e57600080fd5b50565b6000813590506131508161312a565b92915050565b600080fd5b600080fd5b60008083601f84011261317657613175612fda565b5b8235905067ffffffffffffffff81111561319357613192613156565b5b6020830191508360018202830111156131af576131ae61315b565b5b9250929050565b600067ffffffffffffffff8211156131d1576131d0612ff5565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061320d826131e2565b9050919050565b61321d81613202565b811461322857600080fd5b50565b60008135905061323a81613214565b92915050565b600061325361324e846131b6565b613055565b905080838252602082019050602084028301858111156132765761327561315b565b5b835b8181101561329f578061328b888261322b565b845260208401935050602081019050613278565b5050509392505050565b600082601f8301126132be576132bd612fda565b5b81356132ce848260208601613240565b91505092915050565b6000806000806000608086880312156132f3576132f2612fd0565b5b600086013567ffffffffffffffff81111561331157613310612fd5565b5b61331d888289016130f2565b955050602061332e88828901613141565b945050604086013567ffffffffffffffff81111561334f5761334e612fd5565b5b61335b88828901613160565b9350935050606086013567ffffffffffffffff81111561337e5761337d612fd5565b5b61338a888289016132a9565b9150509295509295909350565b600080604083850312156133ae576133ad612fd0565b5b600083013567ffffffffffffffff8111156133cc576133cb612fd5565b5b6133d8858286016130f2565b92505060206133e985828601613141565b9150509250929050565b6133fc81613120565b82525050565b600060208201905061341760008301846133f3565b92915050565b600067ffffffffffffffff82111561343857613437612ff5565b5b602082029050602081019050919050565b600061345c6134578461341d565b613055565b9050808382526020820190506020840283018581111561347f5761347e61315b565b5b835b818110156134a857806134948882613141565b845260208401935050602081019050613481565b5050509392505050565b600082601f8301126134c7576134c6612fda565b5b81356134d7848260208601613449565b91505092915050565b60008083601f8401126134f6576134f5612fda565b5b8235905067ffffffffffffffff81111561351357613512613156565b5b60208301915083602082028301111561352f5761352e61315b565b5b9250929050565b60008060008060006080868803121561355257613551612fd0565b5b600086013567ffffffffffffffff8111156135705761356f612fd5565b5b61357c888289016130f2565b955050602061358d88828901613141565b945050604086013567ffffffffffffffff8111156135ae576135ad612fd5565b5b6135ba888289016134b2565b935050606086013567ffffffffffffffff8111156135db576135da612fd5565b5b6135e7888289016134e0565b92509250509295509295909350565b60006020828403121561360c5761360b612fd0565b5b600061361a8482850161322b565b91505092915050565b60006020828403121561363957613638612fd0565b5b600082013567ffffffffffffffff81111561365757613656612fd5565b5b613663848285016130f2565b91505092915050565b600060ff82169050919050565b6136828161366c565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6136bd81613202565b82525050565b60006136cf83836136b4565b60208301905092915050565b6000602082019050919050565b60006136f382613688565b6136fd8185613693565b9350613708836136a4565b8060005b8381101561373957815161372088826136c3565b975061372b836136db565b92505060018101905061370c565b5085935050505092915050565b61374f81613120565b82525050565b600060a08301600083015161376d6000860182613679565b506020830151848203602086015261378582826136e8565b915050604083015161379a60408601826136b4565b5060608301516137ad6060860182613746565b5060808301516137c06080860182613746565b508091505092915050565b600060208201905081810360008301526137e58184613755565b905092915050565b60008060008060006080868803121561380957613808612fd0565b5b600086013567ffffffffffffffff81111561382757613826612fd5565b5b613833888289016130f2565b955050602061384488828901613141565b945050604061385588828901613141565b935050606086013567ffffffffffffffff81111561387657613875612fd5565b5b61388288828901613160565b92509250509295509295909350565b61389a81613202565b82525050565b60006020820190506138b56000830184613891565b92915050565b60008060008060008060008060006101008a8c0312156138de576138dd612fd0565b5b60008a013567ffffffffffffffff8111156138fc576138fb612fd5565b5b6139088c828d016130f2565b99505060206139198c828d01613141565b985050604061392a8c828d01613141565b975050606061393b8c828d01613141565b965050608061394c8c828d0161322b565b95505060a08a013567ffffffffffffffff81111561396d5761396c612fd5565b5b6139798c828d016132a9565b94505060c08a013567ffffffffffffffff81111561399a57613999612fd5565b5b6139a68c828d016134b2565b93505060e08a013567ffffffffffffffff8111156139c7576139c6612fd5565b5b6139d38c828d016134e0565b92509250509295985092959850929598565b600081519050919050565b600081905092915050565b60005b83811015613a195780820151818401526020810190506139fe565b60008484015250505050565b6000613a30826139e5565b613a3a81856139f0565b9350613a4a8185602086016139fb565b80840191505092915050565b6000613a628284613a25565b915081905092915050565b600082825260208201905092915050565b7f626574206973206e6f74206c6976650000000000000000000000000000000000600082015250565b6000613ab4600f83613a6d565b9150613abf82613a7e565b602082019050919050565b60006020820190508181036000830152613ae381613aa7565b9050919050565b7f62657420686173206e6f74207965742065787069726564000000000000000000600082015250565b6000613b20601783613a6d565b9150613b2b82613aea565b602082019050919050565b60006020820190508181036000830152613b4f81613b13565b9050919050565b7f696e76616c6964206d6f64657261746f72206e6f6e6365000000000000000000600082015250565b6000613b8c601783613a6d565b9150613b9782613b56565b602082019050919050565b60006020820190508181036000830152613bbb81613b7f565b9050919050565b6000613bcd826139e5565b613bd78185613a6d565b9350613be78185602086016139fb565b613bf081612fe4565b840191505092915050565b60006060820190508181036000830152613c158186613bc2565b9050613c246020830185613891565b613c3160408301846133f3565b949350505050565b60006020820190508181036000830152613c538184613bc2565b905092915050565b7f696e76616c6964206d6f64657261746f72207369676e61747572650000000000600082015250565b6000613c91601b83613a6d565b9150613c9c82613c5b565b602082019050919050565b60006020820190508181036000830152613cc081613c84565b9050919050565b7f696e76616c6964206e756d626572206f662077696e6e65727300000000000000600082015250565b6000613cfd601983613a6d565b9150613d0882613cc7565b602082019050919050565b60006020820190508181036000830152613d2c81613cf0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e76616c69642077696e6e6572000000000000000000000000000000000000600082015250565b6000613d98600e83613a6d565b9150613da382613d62565b602082019050919050565b60006020820190508181036000830152613dc781613d8b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e0882613120565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613e3a57613e39613dce565b5b600182019050919050565b6000613e5082613120565b9150613e5b83613120565b9250828201905080821115613e7357613e72613dce565b5b92915050565b7f20686173206265656e207265636f6e63696c6564000000000000000000000000815250565b6000613eab8284613a25565b9150613eb682613e79565b60148201915081905092915050565b6000613ed082613120565b9150613edb83613120565b9250828203905081811115613ef357613ef2613dce565b5b92915050565b7f20686173206265656e2063616e63656c6c6564206279206f776e657200000000815250565b6000613f2b8284613a25565b9150613f3682613ef9565b601c8201915081905092915050565b7f696e76616c6964206e756d626572206f66207369676e617475726573206f722060008201527f6e6f6e6365730000000000000000000000000000000000000000000000000000602082015250565b6000613fa1602683613a6d565b9150613fac82613f45565b604082019050919050565b60006020820190508181036000830152613fd081613f94565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261400357614002613fd7565b5b80840192508235915067ffffffffffffffff82111561402557614024613fdc565b5b60208301925060018202360383131561404157614040613fe1565b5b509250929050565b7f5d2068617320616e20696e76616c6964206e6f6e636500000000000000000000815250565b600061407b8284613a25565b915061408682614049565b60168201915081905092915050565b7f206164647265737320646f65736e2774206d61746368207369676e6174757265815250565b60006140c78284613a25565b91506140d282614095565b60208201915081905092915050565b7f20686173206265656e2063616e63656c6c656420627920616c6c20706172746960008201527f636970616e747300000000000000000000000000000000000000000000000000602082015250565b600061413d6027836139f0565b9150614148826140e1565b602782019050919050565b600061415f8284613a25565b915061416a82614130565b915081905092915050565b7f62657420696420646f6573206e6f742065786973740000000000000000000000600082015250565b60006141ab601583613a6d565b91506141b682614175565b602082019050919050565b600060208201905081810360008301526141da8161419e565b9050919050565b7f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b6000614217601283613a6d565b9150614222826141e1565b602082019050919050565b600060208201905081810360008301526142468161420a565b9050919050565b7f77697468647261775b0000000000000000000000000000000000000000000000815250565b7f5d20616d6f756e745b0000000000000000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b60006142ca8261424d565b6009820191506142da8285613a25565b91506142e582614273565b6009820191506142f58284613a25565b915061430082614299565b6001820191508190509392505050565b7f20686173206265656e2063616e63656c6c6564206279206d6f64657261746f72815250565b60006143428284613a25565b915061434d82614310565b60208201915081905092915050565b7f647261696e5b0000000000000000000000000000000000000000000000000000815250565b600061438d8261435c565b60068201915061439d8285613a25565b91506143a882614273565b6009820191506143b88284613a25565b91506143c382614299565b6001820191508190509392505050565b7f62657420696420616c7265616479206578697374730000000000000000000000600082015250565b6000614409601583613a6d565b9150614414826143d3565b602082019050919050565b60006020820190508181036000830152614438816143fc565b9050919050565b7f2068617320616e20696e73756666696369656e742062616c616e636500000000815250565b60006144718284613a25565b915061447c8261443f565b601c8201915081905092915050565b7f2068617320616e20696e76616c6964206e6f6e63650000000000000000000000815250565b60006144bd8284613a25565b91506144c88261448b565b60158201915081905092915050565b7f20686173206265656e20616464656420746f207468652073797374656d000000815250565b60006145098284613a25565b9150614514826144d7565b601d8201915081905092915050565b7f6465706f7369745b000000000000000000000000000000000000000000000000815250565b7f5d2062616c616e63655b00000000000000000000000000000000000000000000815250565b600061457a82614523565b60088201915061458a8285613a25565b915061459582614549565b600a820191506145a58284613a25565b91506145b082614299565b6001820191508190509392505050565b7f62657473206d6179206f6e6c792062652063616e63656c65642033302b20646160008201527f79732061667465722065787069726174696f6e00000000000000000000000000602082015250565b600061461c603383613a6d565b9150614627826145c0565b604082019050919050565b6000602082019050818103600083015261464b8161460f565b9050919050565b7f63616e63656c6572206973206e6f7420617574686f72697a656420746f20636160008201527f6e63656c20746869732062657400000000000000000000000000000000000000602082015250565b60006146ae602d83613a6d565b91506146b982614652565b604082019050919050565b600060208201905081810360008301526146dd816146a1565b9050919050565b7f20686173206265656e2063616e63656c6c656420627920000000000000000000815250565b7f2073696e63652065787069726564000000000000000000000000000000000000815250565b600061473c8285613a25565b9150614747826146e4565b6017820191506147578284613a25565b91506147628261470a565b600e820191508190509392505050565b600081519050919050565b600081905092915050565b600061479382614772565b61479d818561477d565b93506147ad8185602086016139fb565b80840191505092915050565b6000819050919050565b6000819050919050565b6147de6147d9826147b9565b6147c3565b82525050565b60006147f08285614788565b91506147fc82846147cd565b6020820191508190509392505050565b600080fd5b600080fd5b6000808585111561482a5761482961480c565b5b8386111561483b5761483a614811565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b60006148758383614851565b8261488081356147b9565b925060208210156148c0576148bb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261485c565b831692505b505092915050565b6148d1816147b9565b82525050565b6148e08161366c565b82525050565b60006080820190506148fb60008301876148c8565b61490860208301866148d7565b61491560408301856148c8565b61492260608301846148c8565b95945050505050565b600061493682613120565b915061494183613120565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561497a57614979613dce565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b60018511156149dc578086048111156149b8576149b7613dce565b5b60018516156149c75780820291505b80810290506149d585614985565b945061499c565b94509492505050565b6000826149f55760019050614ab1565b81614a035760009050614ab1565b8160018114614a195760028114614a2357614a52565b6001915050614ab1565b60ff841115614a3557614a34613dce565b5b8360020a915084821115614a4c57614a4b613dce565b5b50614ab1565b5060208310610133831016604e8410600b8410161715614a875782820a905083811115614a8257614a81613dce565b5b614ab1565b614a948484846001614992565b92509050818404811115614aab57614aaa613dce565b5b81810290505b9392505050565b6000614ac382613120565b9150614ace83613120565b9250614afb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846149e5565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614b3d82613120565b9150614b4883613120565b925082614b5857614b57614b03565b5b828204905092915050565b6000614b6e8261366c565b9150614b798361366c565b925082614b8957614b88614b03565b5b828204905092915050565b6000614b9f8261366c565b9150614baa8361366c565b92508160ff0483118215151615614bc457614bc3613dce565b5b828202905092915050565b6000614bda8261366c565b9150614be58361366c565b9250828203905060ff811115614bfe57614bfd613dce565b5b92915050565b6000614c0f8261366c565b9150614c1a8361366c565b9250828201905060ff811115614c3357614c32613dce565b5b9291505056fea2646970667358221220b96cb508a26389bba494a4c4eca6206921910590b2e9d6166e44a8384938ed8b64736f6c63430008100033",
}

// BookABI is the input ABI used to generate the binding from.
// Deprecated: Use BookMetaData.ABI instead.
var BookABI = BookMetaData.ABI

// BookBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BookMetaData.Bin instead.
var BookBin = BookMetaData.Bin

// DeployBook deploys a new Ethereum contract, binding an instance of Book to it.
func DeployBook(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Book, error) {
	parsed, err := BookMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BookBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Book{BookCaller: BookCaller{contract: contract}, BookTransactor: BookTransactor{contract: contract}, BookFilterer: BookFilterer{contract: contract}}, nil
}

// Book is an auto generated Go binding around an Ethereum contract.
type Book struct {
	BookCaller     // Read-only binding to the contract
	BookTransactor // Write-only binding to the contract
	BookFilterer   // Log filterer for contract events
}

// BookCaller is an auto generated read-only Go binding around an Ethereum contract.
type BookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BookSession struct {
	Contract     *Book             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BookCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BookCallerSession struct {
	Contract *BookCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BookTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BookTransactorSession struct {
	Contract     *BookTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BookRaw is an auto generated low-level Go binding around an Ethereum contract.
type BookRaw struct {
	Contract *Book // Generic contract binding to access the raw methods on
}

// BookCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BookCallerRaw struct {
	Contract *BookCaller // Generic read-only contract binding to access the raw methods on
}

// BookTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BookTransactorRaw struct {
	Contract *BookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBook creates a new instance of Book, bound to a specific deployed contract.
func NewBook(address common.Address, backend bind.ContractBackend) (*Book, error) {
	contract, err := bindBook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Book{BookCaller: BookCaller{contract: contract}, BookTransactor: BookTransactor{contract: contract}, BookFilterer: BookFilterer{contract: contract}}, nil
}

// NewBookCaller creates a new read-only instance of Book, bound to a specific deployed contract.
func NewBookCaller(address common.Address, caller bind.ContractCaller) (*BookCaller, error) {
	contract, err := bindBook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BookCaller{contract: contract}, nil
}

// NewBookTransactor creates a new write-only instance of Book, bound to a specific deployed contract.
func NewBookTransactor(address common.Address, transactor bind.ContractTransactor) (*BookTransactor, error) {
	contract, err := bindBook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BookTransactor{contract: contract}, nil
}

// NewBookFilterer creates a new log filterer instance of Book, bound to a specific deployed contract.
func NewBookFilterer(address common.Address, filterer bind.ContractFilterer) (*BookFilterer, error) {
	contract, err := bindBook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BookFilterer{contract: contract}, nil
}

// bindBook binds a generic wrapper to an already deployed contract.
func bindBook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BookABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Book *BookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Book.Contract.BookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Book *BookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.Contract.BookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Book *BookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Book.Contract.BookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Book *BookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Book.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Book *BookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Book *BookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Book.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "AccountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Book.Contract.AccountBalance(&_Book.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Book.Contract.AccountBalance(&_Book.CallOpts, account)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookCaller) Balance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Balance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookSession) Balance() (*big.Int, error) {
	return _Book.Contract.Balance(&_Book.CallOpts)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookCallerSession) Balance() (*big.Int, error) {
	return _Book.Contract.Balance(&_Book.CallOpts)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookCaller) BetDetails(opts *bind.CallOpts, betID string) (BookBetInfo, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "BetDetails", betID)

	if err != nil {
		return *new(BookBetInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(BookBetInfo)).(*BookBetInfo)

	return out0, err

}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookSession) BetDetails(betID string) (BookBetInfo, error) {
	return _Book.Contract.BetDetails(&_Book.CallOpts, betID)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookCallerSession) BetDetails(betID string) (BookBetInfo, error) {
	return _Book.Contract.BetDetails(&_Book.CallOpts, betID)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookCaller) Nonce(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Nonce", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookSession) Nonce(account common.Address) (*big.Int, error) {
	return _Book.Contract.Nonce(&_Book.CallOpts, account)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookCallerSession) Nonce(account common.Address) (*big.Int, error) {
	return _Book.Contract.Nonce(&_Book.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookSession) Owner() (common.Address, error) {
	return _Book.Contract.Owner(&_Book.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookCallerSession) Owner() (common.Address, error) {
	return _Book.Contract.Owner(&_Book.CallOpts)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookTransactor) CancelBetExpired(opts *bind.TransactOpts, betID string) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetExpired", betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Book.Contract.CancelBetExpired(&_Book.TransactOpts, betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookTransactorSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Book.Contract.CancelBetExpired(&_Book.TransactOpts, betID)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookTransactor) CancelBetModerator(opts *bind.TransactOpts, betID string, feeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetModerator", betID, feeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookSession) CancelBetModerator(betID string, feeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetModerator(&_Book.TransactOpts, betID, feeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookTransactorSession) CancelBetModerator(betID string, feeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetModerator(&_Book.TransactOpts, betID, feeWei, nonce, signature)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeWei) returns()
func (_Book *BookTransactor) CancelBetOwner(opts *bind.TransactOpts, betID string, feeWei *big.Int) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetOwner", betID, feeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeWei) returns()
func (_Book *BookSession) CancelBetOwner(betID string, feeWei *big.Int) (*types.Transaction, error) {
	return _Book.Contract.CancelBetOwner(&_Book.TransactOpts, betID, feeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeWei) returns()
func (_Book *BookTransactorSession) CancelBetOwner(betID string, feeWei *big.Int) (*types.Transaction, error) {
	return _Book.Contract.CancelBetOwner(&_Book.TransactOpts, betID, feeWei)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactor) CancelBetParticipants(opts *bind.TransactOpts, betID string, feeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetParticipants", betID, feeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookSession) CancelBetParticipants(betID string, feeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetParticipants(&_Book.TransactOpts, betID, feeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactorSession) CancelBetParticipants(betID string, feeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetParticipants(&_Book.TransactOpts, betID, feeWei, nonces, signatures)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookSession) Deposit() (*types.Transaction, error) {
	return _Book.Contract.Deposit(&_Book.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookTransactorSession) Deposit() (*types.Transaction, error) {
	return _Book.Contract.Deposit(&_Book.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookTransactor) Drain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Drain")
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookSession) Drain() (*types.Transaction, error) {
	return _Book.Contract.Drain(&_Book.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookTransactorSession) Drain() (*types.Transaction, error) {
	return _Book.Contract.Drain(&_Book.TransactOpts)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactor) PlaceBet(opts *bind.TransactOpts, betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "PlaceBet", betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookSession) PlaceBet(betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.PlaceBet(&_Book.TransactOpts, betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactorSession) PlaceBet(betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.PlaceBet(&_Book.TransactOpts, betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookTransactor) ReconcileBet(opts *bind.TransactOpts, betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "ReconcileBet", betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.Contract.ReconcileBet(&_Book.TransactOpts, betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookTransactorSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.Contract.ReconcileBet(&_Book.TransactOpts, betID, nonce, signature, winners)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookSession) Withdraw() (*types.Transaction, error) {
	return _Book.Contract.Withdraw(&_Book.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Book.Contract.Withdraw(&_Book.TransactOpts)
}

// BookEventLogIterator is returned from FilterEventLog and is used to iterate over the raw logs and unpacked data for EventLog events raised by the Book contract.
type BookEventLogIterator struct {
	Event *BookEventLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BookEventLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BookEventLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BookEventLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BookEventLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BookEventLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BookEventLog represents a EventLog event raised by the Book contract.
type BookEventLog struct {
	Value string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEventLog is a free log retrieval operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) FilterEventLog(opts *bind.FilterOpts) (*BookEventLogIterator, error) {

	logs, sub, err := _Book.contract.FilterLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return &BookEventLogIterator{contract: _Book.contract, event: "EventLog", logs: logs, sub: sub}, nil
}

// WatchEventLog is a free log subscription operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) WatchEventLog(opts *bind.WatchOpts, sink chan<- *BookEventLog) (event.Subscription, error) {

	logs, sub, err := _Book.contract.WatchLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BookEventLog)
				if err := _Book.contract.UnpackLog(event, "EventLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventLog is a log parse operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) ParseEventLog(log types.Log) (*BookEventLog, error) {
	event := new(BookEventLog)
	if err := _Book.contract.UnpackLog(event, "EventLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
