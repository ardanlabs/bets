// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package book

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BookBetInfo is an auto generated low-level Go binding around an user-defined struct.
type BookBetInfo struct {
	State        uint8
	Participants []common.Address
	Moderator    common.Address
	AmountBetWei *big.Int
	Expiration   *big.Int
}

// BookMetaData contains all meta data concerning the Book contract.
var BookMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"EventLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"BetDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"State\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"Participants\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Moderator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AmountBetWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Expiration\",\"type\":\"uint256\"}],\"internalType\":\"structBook.BetInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"CancelBetExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"CancelBetModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"}],\"name\":\"CancelBetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"CancelBetParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Drain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountBetWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"PlaceBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"ReconcileBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614c00806100606000396000f3fe6080604052600436106100dd5760003560e01c80637c64ce361161007f578063e2a06aca11610059578063e2a06aca1461026a578063e63f341f14610293578063ed21248c146102d0578063f8856b88146102da576100dd565b80637c64ce361461020c578063b4a99a4e14610235578063d67a073f14610260576100dd565b8063221da6a5116100bb578063221da6a51461015f57806330d0cee914610188578063364529e5146101c557806357ea89b614610202576100dd565b80630e302132146100e25780630ee216b71461010b5780630ef6788714610134575b600080fd5b3480156100ee57600080fd5b50610109600480360381019061010491906132ae565b610303565b005b34801561011757600080fd5b50610132600480360381019061012d919061336e565b6108ab565b005b34801561014057600080fd5b50610149610b62565b60405161015691906133d9565b60405180910390f35b34801561016b57600080fd5b506101866004803603810190610181919061350d565b610bac565b005b34801561019457600080fd5b506101af60048036038101906101aa91906135cd565b6111b8565b6040516101bc91906133d9565b60405180910390f35b3480156101d157600080fd5b506101ec60048036038101906101e791906135fa565b61125d565b6040516101f991906137a2565b60405180910390f35b61020a61147f565b005b34801561021857600080fd5b50610233600480360381019061022e91906137c4565b61161a565b005b34801561024157600080fd5b5061024a611b49565b6040516102579190613877565b60405180910390f35b610268611b6d565b005b34801561027657600080fd5b50610291600480360381019061028c9190613892565b611c82565b005b34801561029f57600080fd5b506102ba60048036038101906102b591906135cd565b6124a0565b6040516102c791906133d9565b60405180910390f35b6102d8612545565b005b3480156102e657600080fd5b5061030160048036038101906102fc91906135fa565b61264a565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035b57600080fd5b600060028660405161036d9190613a2d565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff16146103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d190613aa1565b60405180910390fd5b8060000160040154421015610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041b90613b0d565b60405180910390fd5b84600160008360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154146104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c690613b79565b60405180910390fd5b6000868260000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405160200161050d93929190613bd2565b60405160208183030381529060405280519060200120905060008061053383888861290d565b915091508060000151156105825780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105799190613c10565b60405180910390fd5b8360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90613c7e565b60405180910390fd5b60005b85518110156106de5784600501600087838151811061063c5761063b613c9e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c290613d3f565b60405180910390fd5b80806106d690613d8e565b91505061061a565b506000600285600001600301546106f59190613dd6565b905060008651826107069190613e5f565b905060005b875181101561079a5781600160008a848151811061072c5761072b613c9e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546107809190613e90565b92505081905550808061079290613d8e565b91505061070b565b50600160008760000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600081548092919061081590613d8e565b919050555060028660000160000160006101000a81548160ff021916908360ff160217905550600086600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8b60405160200161087a9190613eea565b6040516020818303038152906040526040516108969190613c10565b60405180910390a15050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461090357600080fd5b60006002836040516109159190613a2d565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff1614610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990613aa1565b60405180910390fd5b60008282600001600301546109979190613f10565b905060005b8260000160010180549050811015610ad75781600160008560000160010184815481106109cc576109cb613c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610a439190613e90565b9250508190555083600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610abd9190613e90565b925050819055508080610acf90613d8e565b91505061099c565b5060038260000160000160006101000a81548160ff021916908360ff160217905550600082600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a84604051602001610b389190613f6a565b604051602081830303815290604052604051610b549190613c10565b60405180910390a150505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c0457600080fd5b6000600286604051610c169190613a2d565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff1614610c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7a90613aa1565b60405180910390fd5b828290508160000160010180549050141580610caa57508351816000016001018054905014155b15610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce190614002565b60405180910390fd5b60005b8160000160010180549050811015610fd4576000826000016001018281548110610d1a57610d19613c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000868381518110610d5c57610d5b613c9e565b5b60200260200101519050366000878786818110610d7c57610d7b613c9e565b5b9050602002810190610d8e9190614031565b9150915082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414610e3f57610de484612aa6565b604051602001610df491906140ba565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e369190613c10565b60405180910390fd5b60008b8585604051602001610e5693929190613bd2565b604051602081830303815290604052805190602001209050600080610e7c83868661290d565b91509150806000015115610ecb5780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec29190613c10565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610f6257610f0787612aa6565b604051602001610f179190614106565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f599190613c10565b60405180910390fd5b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190610fb590613d8e565b9190505550505050505050508080610fcc90613d8e565b915050610ced565b506000858260000160030154610fea9190613f10565b905060005b826000016001018054905081101561112a57816001600085600001600101848154811061101f5761101e613c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546110969190613e90565b9250508190555086600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546111109190613e90565b92505081905550808061112290613d8e565b915050610fef565b5060038260000160000160006101000a81548160ff021916908360ff160217905550600082600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8760405160200161118b919061419e565b6040516020818303038152906040526040516111a79190613c10565b60405180910390a150505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461121357600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b611265612e92565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112bd57600080fd5b600060ff166002836040516112d29190613a2d565b908152602001604051809103902060000160000160009054906101000a900460ff1660ff1603611337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132e9061420c565b60405180910390fd5b6002826040516113479190613a2d565b90815260200160405180910390206000016040518060a00160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561140557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116113bb575b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815250509050919050565b60003390506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000810361150e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150590614278565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611554573d6000803e3d6000fd5b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546115a79190613f10565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6115d833612aa6565b6115e183612c69565b6040516020016115f292919061430a565b60405160208183030381529060405260405161160e9190613c10565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461167257600080fd5b60006002866040516116849190613a2d565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff16146116f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e890613aa1565b60405180910390fd5b83600160008360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541461179c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179390613b79565b60405180910390fd5b6000868260000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040516020016117da93929190613bd2565b60405160208183030381529060405280519060200120905060008061180083878761290d565b9150915080600001511561184f5780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118469190613c10565b60405180910390fd5b8360000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146118e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118db90613c7e565b60405180910390fd5b60008885600001600301546118f99190613f10565b905060005b8560000160010180549050811015611a3957816001600088600001600101848154811061192e5761192d613c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546119a59190613e90565b9250508190555089600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611a1f9190613e90565b925050819055508080611a3190613d8e565b9150506118fe565b50600160008660000160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190611ab490613d8e565b919050555060038560000160000160006101000a81548160ff021916908360ff160217905550600085600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a604051602001611b199190614381565b604051602081830303815290604052604051611b359190613c10565b60405180910390a150505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bc557600080fd5b600033905060004790508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611c15573d6000803e3d6000fd5b507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611c4083612aa6565b611c4983612c69565b604051602001611c5a9291906143cd565b604051602081830303815290604052604051611c769190613c10565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611cda57600080fd5b600060ff1660028a604051611cef9190613a2d565b908152602001604051809103902060000160000160009054906101000a900460ff1660ff1614611d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4b9061446a565b60405180910390fd5b60008789611d629190613e90565b905060005b8551811015612072576000868281518110611d8557611d84613c9e565b5b602002602001015190506000868381518110611da457611da3613c9e565b5b60200260200101519050366000878786818110611dc457611dc3613c9e565b5b9050602002810190611dd69190614031565b9150915085600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015611e8857611e2d84612aa6565b604051602001611e3d91906144b0565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7f9190613c10565b60405180910390fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414611f3557611eda84612aa6565b604051602001611eea91906144fc565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2c9190613c10565b60405180910390fd5b60008f8585604051602001611f4c93929190613bd2565b604051602081830303815290604052805190602001209050600080611f7283868661290d565b91509150806000015115611fc15780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb89190613c10565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461205857611ffd87612aa6565b60405160200161200d9190614106565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204f9190613c10565b60405180910390fd5b50505050505050808061206a90613d8e565b915050611d67565b506040518060a00160405280600160ff1681526020018681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018881525060028b6040516120c49190613a2d565b908152602001604051809103902060000160008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001019080519060200190612112929190612eda565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015590505060005b855181101561235257600086828151811061219257612191613c9e565b5b6020026020010151905082600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546121ee9190613f10565b92505081905550600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600081548092919061224890613d8e565b919050555089600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546122c09190613e90565b92505081905550600160028d6040516122d99190613a2d565b908152602001604051809103902060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050808061234a90613d8e565b915050612174565b50600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1661243e576040518060600160405280600115158152602001600081526020016000815250600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201559050505b7fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a6040516020016124709190614548565b60405160208183030381529060405260405161248c9190613c10565b60405180910390a150505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124fb57600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546125979190613e90565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6125c833612aa6565b612613600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612c69565b6040516020016126249291906145ba565b6040516020818303038152906040526040516126409190613c10565b60405180910390a1565b600060028260405161265c9190613a2d565b90815260200160405180910390209050600160ff168160000160000160009054906101000a900460ff1660ff16146126c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c090613aa1565b60405180910390fd5b62278d0081600001600401546126df9190613e90565b421015612721576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127189061467d565b60405180910390fd5b8060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166127af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a69061470f565b60405180910390fd5b60005b816000016001018054905081101561287a578160000160030154600160008460000160010184815481106127e9576127e8613c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546128609190613e90565b92505081905550808061287290613d8e565b9150506127b2565b5060038160000160000160006101000a81548160ff021916908360ff160217905550600081600001600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a826128d433612aa6565b6040516020016128e592919061477b565b6040516020818303038152906040526040516129019190613c10565b60405180910390a15050565b6000612917612f64565b6041848490501461296b5760006129626040518060400160405280601881526020017f696e76616c6964207369676e6174757265206c656e6774680000000000000000815250612df1565b91509150612a9e565b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081876040516020016129ba92919061482f565b604051602081830303815290604052805190602001209050600086866000906020926129e893929190614861565b906129f391906148b4565b905060008787602090604092612a0b93929190614861565b90612a1691906148b4565b9050600088886040818110612a2e57612a2d613c9e565b5b9050013560f81c60f81b60f81c905060018482858560405160008152602001604052604051612a609493929190614931565b6020604051602081039080840390855afa158015612a82573d6000803e3d6000fd5b50505060206040510351612a94612e18565b9650965050505050505b935093915050565b60606000602867ffffffffffffffff811115612ac557612ac4612fcc565b5b6040519080825280601f01601f191660200182016040528015612af75781602001600182028036833780820191505090505b50905060005b6014811015612c5f576000816013612b159190613f10565b6008612b219190613dd6565b6002612b2d9190614aa9565b8573ffffffffffffffffffffffffffffffffffffffff16612b4e9190613e5f565b60f81b9050600060108260f81c612b659190614af4565b60f81b905060008160f81c6010612b7c9190614b25565b8360f81c612b8a9190614b60565b60f81b9050612b9882612e4c565b85856002612ba69190613dd6565b81518110612bb757612bb6613c9e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612bef81612e4c565b856001866002612bff9190613dd6565b612c099190613e90565b81518110612c1a57612c19613c9e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080612c5790613d8e565b915050612afd565b5080915050919050565b606060008203612cb0576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612dec565b600082905060005b60008214612ce2578080612ccb90613d8e565b915050600a82612cdb9190613e5f565b9150612cb8565b60008167ffffffffffffffff811115612cfe57612cfd612fcc565b5b6040519080825280601f01601f191660200182016040528015612d305781602001600182028036833780820191505090505b50905060008290505b60008614612de457600181612d4e9190613f10565b90506000600a8088612d609190613e5f565b612d6a9190613dd6565b87612d759190613f10565b6030612d819190614b95565b905060008160f81b905080848481518110612d9f57612d9e613c9e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88612ddb9190613e5f565b97505050612d39565b819450505050505b919050565b612df9612f64565b6040518060400160405280600115158152602001838152509050919050565b612e20612f64565b604051806040016040528060001515815260200160405180602001604052806000815250815250905090565b6000600a8260f81c60ff161015612e775760308260f81c612e6d9190614b95565b60f81b9050612e8d565b60578260f81c612e879190614b95565b60f81b90505b919050565b6040518060a00160405280600060ff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b828054828255906000526020600020908101928215612f53579160200282015b82811115612f525782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612efa565b5b509050612f609190612f80565b5090565b6040518060400160405280600015158152602001606081525090565b5b80821115612f99576000816000905550600101612f81565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61300482612fbb565b810181811067ffffffffffffffff8211171561302357613022612fcc565b5b80604052505050565b6000613036612f9d565b90506130428282612ffb565b919050565b600067ffffffffffffffff82111561306257613061612fcc565b5b61306b82612fbb565b9050602081019050919050565b82818337600083830152505050565b600061309a61309584613047565b61302c565b9050828152602081018484840111156130b6576130b5612fb6565b5b6130c1848285613078565b509392505050565b600082601f8301126130de576130dd612fb1565b5b81356130ee848260208601613087565b91505092915050565b6000819050919050565b61310a816130f7565b811461311557600080fd5b50565b60008135905061312781613101565b92915050565b600080fd5b600080fd5b60008083601f84011261314d5761314c612fb1565b5b8235905067ffffffffffffffff81111561316a5761316961312d565b5b60208301915083600182028301111561318657613185613132565b5b9250929050565b600067ffffffffffffffff8211156131a8576131a7612fcc565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131e4826131b9565b9050919050565b6131f4816131d9565b81146131ff57600080fd5b50565b600081359050613211816131eb565b92915050565b600061322a6132258461318d565b61302c565b9050808382526020820190506020840283018581111561324d5761324c613132565b5b835b8181101561327657806132628882613202565b84526020840193505060208101905061324f565b5050509392505050565b600082601f83011261329557613294612fb1565b5b81356132a5848260208601613217565b91505092915050565b6000806000806000608086880312156132ca576132c9612fa7565b5b600086013567ffffffffffffffff8111156132e8576132e7612fac565b5b6132f4888289016130c9565b955050602061330588828901613118565b945050604086013567ffffffffffffffff81111561332657613325612fac565b5b61333288828901613137565b9350935050606086013567ffffffffffffffff81111561335557613354612fac565b5b61336188828901613280565b9150509295509295909350565b6000806040838503121561338557613384612fa7565b5b600083013567ffffffffffffffff8111156133a3576133a2612fac565b5b6133af858286016130c9565b92505060206133c085828601613118565b9150509250929050565b6133d3816130f7565b82525050565b60006020820190506133ee60008301846133ca565b92915050565b600067ffffffffffffffff82111561340f5761340e612fcc565b5b602082029050602081019050919050565b600061343361342e846133f4565b61302c565b9050808382526020820190506020840283018581111561345657613455613132565b5b835b8181101561347f578061346b8882613118565b845260208401935050602081019050613458565b5050509392505050565b600082601f83011261349e5761349d612fb1565b5b81356134ae848260208601613420565b91505092915050565b60008083601f8401126134cd576134cc612fb1565b5b8235905067ffffffffffffffff8111156134ea576134e961312d565b5b60208301915083602082028301111561350657613505613132565b5b9250929050565b60008060008060006080868803121561352957613528612fa7565b5b600086013567ffffffffffffffff81111561354757613546612fac565b5b613553888289016130c9565b955050602061356488828901613118565b945050604086013567ffffffffffffffff81111561358557613584612fac565b5b61359188828901613489565b935050606086013567ffffffffffffffff8111156135b2576135b1612fac565b5b6135be888289016134b7565b92509250509295509295909350565b6000602082840312156135e3576135e2612fa7565b5b60006135f184828501613202565b91505092915050565b6000602082840312156136105761360f612fa7565b5b600082013567ffffffffffffffff81111561362e5761362d612fac565b5b61363a848285016130c9565b91505092915050565b600060ff82169050919050565b61365981613643565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613694816131d9565b82525050565b60006136a6838361368b565b60208301905092915050565b6000602082019050919050565b60006136ca8261365f565b6136d4818561366a565b93506136df8361367b565b8060005b838110156137105781516136f7888261369a565b9750613702836136b2565b9250506001810190506136e3565b5085935050505092915050565b613726816130f7565b82525050565b600060a0830160008301516137446000860182613650565b506020830151848203602086015261375c82826136bf565b9150506040830151613771604086018261368b565b506060830151613784606086018261371d565b506080830151613797608086018261371d565b508091505092915050565b600060208201905081810360008301526137bc818461372c565b905092915050565b6000806000806000608086880312156137e0576137df612fa7565b5b600086013567ffffffffffffffff8111156137fe576137fd612fac565b5b61380a888289016130c9565b955050602061381b88828901613118565b945050604061382c88828901613118565b935050606086013567ffffffffffffffff81111561384d5761384c612fac565b5b61385988828901613137565b92509250509295509295909350565b613871816131d9565b82525050565b600060208201905061388c6000830184613868565b92915050565b60008060008060008060008060006101008a8c0312156138b5576138b4612fa7565b5b60008a013567ffffffffffffffff8111156138d3576138d2612fac565b5b6138df8c828d016130c9565b99505060206138f08c828d01613118565b98505060406139018c828d01613118565b97505060606139128c828d01613118565b96505060806139238c828d01613202565b95505060a08a013567ffffffffffffffff81111561394457613943612fac565b5b6139508c828d01613280565b94505060c08a013567ffffffffffffffff81111561397157613970612fac565b5b61397d8c828d01613489565b93505060e08a013567ffffffffffffffff81111561399e5761399d612fac565b5b6139aa8c828d016134b7565b92509250509295985092959850929598565b600081519050919050565b600081905092915050565b60005b838110156139f05780820151818401526020810190506139d5565b60008484015250505050565b6000613a07826139bc565b613a1181856139c7565b9350613a218185602086016139d2565b80840191505092915050565b6000613a3982846139fc565b915081905092915050565b600082825260208201905092915050565b7f626574206973206e6f74206c6976650000000000000000000000000000000000600082015250565b6000613a8b600f83613a44565b9150613a9682613a55565b602082019050919050565b60006020820190508181036000830152613aba81613a7e565b9050919050565b7f62657420686173206e6f74207965742065787069726564000000000000000000600082015250565b6000613af7601783613a44565b9150613b0282613ac1565b602082019050919050565b60006020820190508181036000830152613b2681613aea565b9050919050565b7f696e76616c6964206d6f64657261746f72206e6f6e6365000000000000000000600082015250565b6000613b63601783613a44565b9150613b6e82613b2d565b602082019050919050565b60006020820190508181036000830152613b9281613b56565b9050919050565b6000613ba4826139bc565b613bae8185613a44565b9350613bbe8185602086016139d2565b613bc781612fbb565b840191505092915050565b60006060820190508181036000830152613bec8186613b99565b9050613bfb6020830185613868565b613c0860408301846133ca565b949350505050565b60006020820190508181036000830152613c2a8184613b99565b905092915050565b7f696e76616c6964206d6f64657261746f72207369676e61747572650000000000600082015250565b6000613c68601b83613a44565b9150613c7382613c32565b602082019050919050565b60006020820190508181036000830152613c9781613c5b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f77696e6e65722061646472657373206973206e6f74206120706172746963697060008201527f616e740000000000000000000000000000000000000000000000000000000000602082015250565b6000613d29602383613a44565b9150613d3482613ccd565b604082019050919050565b60006020820190508181036000830152613d5881613d1c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d99826130f7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613dcb57613dca613d5f565b5b600182019050919050565b6000613de1826130f7565b9150613dec836130f7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e2557613e24613d5f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e6a826130f7565b9150613e75836130f7565b925082613e8557613e84613e30565b5b828204905092915050565b6000613e9b826130f7565b9150613ea6836130f7565b9250828201905080821115613ebe57613ebd613d5f565b5b92915050565b7f20686173206265656e207265636f6e63696c6564000000000000000000000000815250565b6000613ef682846139fc565b9150613f0182613ec4565b60148201915081905092915050565b6000613f1b826130f7565b9150613f26836130f7565b9250828203905081811115613f3e57613f3d613d5f565b5b92915050565b7f20686173206265656e2063616e63656c6c6564206279206f776e657200000000815250565b6000613f7682846139fc565b9150613f8182613f44565b601c8201915081905092915050565b7f696e76616c6964206e756d626572206f66207369676e617475726573206f722060008201527f6e6f6e6365730000000000000000000000000000000000000000000000000000602082015250565b6000613fec602683613a44565b9150613ff782613f90565b604082019050919050565b6000602082019050818103600083015261401b81613fdf565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261404e5761404d614022565b5b80840192508235915067ffffffffffffffff8211156140705761406f614027565b5b60208301925060018202360383131561408c5761408b61402c565b5b509250929050565b7f5d2068617320616e20696e76616c6964206e6f6e636500000000000000000000815250565b60006140c682846139fc565b91506140d182614094565b60168201915081905092915050565b7f206164647265737320646f65736e2774206d61746368207369676e6174757265815250565b600061411282846139fc565b915061411d826140e0565b60208201915081905092915050565b7f20686173206265656e2063616e63656c6c656420627920616c6c20706172746960008201527f636970616e747300000000000000000000000000000000000000000000000000602082015250565b60006141886027836139c7565b91506141938261412c565b602782019050919050565b60006141aa82846139fc565b91506141b58261417b565b915081905092915050565b7f62657420696420646f6573206e6f742065786973740000000000000000000000600082015250565b60006141f6601583613a44565b9150614201826141c0565b602082019050919050565b60006020820190508181036000830152614225816141e9565b9050919050565b7f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b6000614262601283613a44565b915061426d8261422c565b602082019050919050565b6000602082019050818103600083015261429181614255565b9050919050565b7f77697468647261775b0000000000000000000000000000000000000000000000815250565b7f5d20616d6f756e745b0000000000000000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b600061431582614298565b60098201915061432582856139fc565b9150614330826142be565b60098201915061434082846139fc565b915061434b826142e4565b6001820191508190509392505050565b7f20686173206265656e2063616e63656c6c6564206279206d6f64657261746f72815250565b600061438d82846139fc565b91506143988261435b565b60208201915081905092915050565b7f647261696e5b0000000000000000000000000000000000000000000000000000815250565b60006143d8826143a7565b6006820191506143e882856139fc565b91506143f3826142be565b60098201915061440382846139fc565b915061440e826142e4565b6001820191508190509392505050565b7f62657420696420616c7265616479206578697374730000000000000000000000600082015250565b6000614454601583613a44565b915061445f8261441e565b602082019050919050565b6000602082019050818103600083015261448381614447565b9050919050565b7f2068617320616e20696e73756666696369656e742062616c616e636500000000815250565b60006144bc82846139fc565b91506144c78261448a565b601c8201915081905092915050565b7f2068617320616e20696e76616c6964206e6f6e63650000000000000000000000815250565b600061450882846139fc565b9150614513826144d6565b60158201915081905092915050565b7f20686173206265656e20616464656420746f207468652073797374656d000000815250565b600061455482846139fc565b915061455f82614522565b601d8201915081905092915050565b7f6465706f7369745b000000000000000000000000000000000000000000000000815250565b7f5d2062616c616e63655b00000000000000000000000000000000000000000000815250565b60006145c58261456e565b6008820191506145d582856139fc565b91506145e082614594565b600a820191506145f082846139fc565b91506145fb826142e4565b6001820191508190509392505050565b7f62657473206d6179206f6e6c792062652063616e63656c65642033302b20646160008201527f79732061667465722065787069726174696f6e00000000000000000000000000602082015250565b6000614667603383613a44565b91506146728261460b565b604082019050919050565b600060208201905081810360008301526146968161465a565b9050919050565b7f63616e63656c6572206973206e6f7420617574686f72697a656420746f20636160008201527f6e63656c20746869732062657400000000000000000000000000000000000000602082015250565b60006146f9602d83613a44565b91506147048261469d565b604082019050919050565b60006020820190508181036000830152614728816146ec565b9050919050565b7f20686173206265656e2063616e63656c6c656420627920000000000000000000815250565b7f2073696e63652065787069726564000000000000000000000000000000000000815250565b600061478782856139fc565b91506147928261472f565b6017820191506147a282846139fc565b91506147ad82614755565b600e820191508190509392505050565b600081519050919050565b600081905092915050565b60006147de826147bd565b6147e881856147c8565b93506147f88185602086016139d2565b80840191505092915050565b6000819050919050565b6000819050919050565b61482961482482614804565b61480e565b82525050565b600061483b82856147d3565b91506148478284614818565b6020820191508190509392505050565b600080fd5b600080fd5b6000808585111561487557614874614857565b5b838611156148865761488561485c565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b60006148c0838361489c565b826148cb8135614804565b9250602082101561490b576149067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026148a7565b831692505b505092915050565b61491c81614804565b82525050565b61492b81613643565b82525050565b60006080820190506149466000830187614913565b6149536020830186614922565b6149606040830185614913565b61496d6060830184614913565b95945050505050565b60008160011c9050919050565b6000808291508390505b60018511156149cd578086048111156149a9576149a8613d5f565b5b60018516156149b85780820291505b80810290506149c685614976565b945061498d565b94509492505050565b6000826149e65760019050614aa2565b816149f45760009050614aa2565b8160018114614a0a5760028114614a1457614a43565b6001915050614aa2565b60ff841115614a2657614a25613d5f565b5b8360020a915084821115614a3d57614a3c613d5f565b5b50614aa2565b5060208310610133831016604e8410600b8410161715614a785782820a905083811115614a7357614a72613d5f565b5b614aa2565b614a858484846001614983565b92509050818404811115614a9c57614a9b613d5f565b5b81810290505b9392505050565b6000614ab4826130f7565b9150614abf836130f7565b9250614aec7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846149d6565b905092915050565b6000614aff82613643565b9150614b0a83613643565b925082614b1a57614b19613e30565b5b828204905092915050565b6000614b3082613643565b9150614b3b83613643565b92508160ff0483118215151615614b5557614b54613d5f565b5b828202905092915050565b6000614b6b82613643565b9150614b7683613643565b9250828203905060ff811115614b8f57614b8e613d5f565b5b92915050565b6000614ba082613643565b9150614bab83613643565b9250828201905060ff811115614bc457614bc3613d5f565b5b9291505056fea26469706673582212208da0b583495c78d367117d8f73850066f948f8da717cb6a1c9a39e5081ba006264736f6c63430008100033",
}

// BookABI is the input ABI used to generate the binding from.
// Deprecated: Use BookMetaData.ABI instead.
var BookABI = BookMetaData.ABI

// BookBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BookMetaData.Bin instead.
var BookBin = BookMetaData.Bin

// DeployBook deploys a new Ethereum contract, binding an instance of Book to it.
func DeployBook(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Book, error) {
	parsed, err := BookMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BookBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Book{BookCaller: BookCaller{contract: contract}, BookTransactor: BookTransactor{contract: contract}, BookFilterer: BookFilterer{contract: contract}}, nil
}

// Book is an auto generated Go binding around an Ethereum contract.
type Book struct {
	BookCaller     // Read-only binding to the contract
	BookTransactor // Write-only binding to the contract
	BookFilterer   // Log filterer for contract events
}

// BookCaller is an auto generated read-only Go binding around an Ethereum contract.
type BookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BookSession struct {
	Contract     *Book             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BookCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BookCallerSession struct {
	Contract *BookCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BookTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BookTransactorSession struct {
	Contract     *BookTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BookRaw is an auto generated low-level Go binding around an Ethereum contract.
type BookRaw struct {
	Contract *Book // Generic contract binding to access the raw methods on
}

// BookCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BookCallerRaw struct {
	Contract *BookCaller // Generic read-only contract binding to access the raw methods on
}

// BookTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BookTransactorRaw struct {
	Contract *BookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBook creates a new instance of Book, bound to a specific deployed contract.
func NewBook(address common.Address, backend bind.ContractBackend) (*Book, error) {
	contract, err := bindBook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Book{BookCaller: BookCaller{contract: contract}, BookTransactor: BookTransactor{contract: contract}, BookFilterer: BookFilterer{contract: contract}}, nil
}

// NewBookCaller creates a new read-only instance of Book, bound to a specific deployed contract.
func NewBookCaller(address common.Address, caller bind.ContractCaller) (*BookCaller, error) {
	contract, err := bindBook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BookCaller{contract: contract}, nil
}

// NewBookTransactor creates a new write-only instance of Book, bound to a specific deployed contract.
func NewBookTransactor(address common.Address, transactor bind.ContractTransactor) (*BookTransactor, error) {
	contract, err := bindBook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BookTransactor{contract: contract}, nil
}

// NewBookFilterer creates a new log filterer instance of Book, bound to a specific deployed contract.
func NewBookFilterer(address common.Address, filterer bind.ContractFilterer) (*BookFilterer, error) {
	contract, err := bindBook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BookFilterer{contract: contract}, nil
}

// bindBook binds a generic wrapper to an already deployed contract.
func bindBook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BookABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Book *BookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Book.Contract.BookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Book *BookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.Contract.BookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Book *BookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Book.Contract.BookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Book *BookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Book.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Book *BookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Book *BookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Book.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "AccountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Book.Contract.AccountBalance(&_Book.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Book.Contract.AccountBalance(&_Book.CallOpts, account)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookCaller) Balance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Balance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookSession) Balance() (*big.Int, error) {
	return _Book.Contract.Balance(&_Book.CallOpts)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookCallerSession) Balance() (*big.Int, error) {
	return _Book.Contract.Balance(&_Book.CallOpts)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookCaller) BetDetails(opts *bind.CallOpts, betID string) (BookBetInfo, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "BetDetails", betID)

	if err != nil {
		return *new(BookBetInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(BookBetInfo)).(*BookBetInfo)

	return out0, err

}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookSession) BetDetails(betID string) (BookBetInfo, error) {
	return _Book.Contract.BetDetails(&_Book.CallOpts, betID)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookCallerSession) BetDetails(betID string) (BookBetInfo, error) {
	return _Book.Contract.BetDetails(&_Book.CallOpts, betID)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookCaller) Nonce(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Nonce", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookSession) Nonce(account common.Address) (*big.Int, error) {
	return _Book.Contract.Nonce(&_Book.CallOpts, account)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookCallerSession) Nonce(account common.Address) (*big.Int, error) {
	return _Book.Contract.Nonce(&_Book.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookSession) Owner() (common.Address, error) {
	return _Book.Contract.Owner(&_Book.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookCallerSession) Owner() (common.Address, error) {
	return _Book.Contract.Owner(&_Book.CallOpts)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookTransactor) CancelBetExpired(opts *bind.TransactOpts, betID string) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetExpired", betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Book.Contract.CancelBetExpired(&_Book.TransactOpts, betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookTransactorSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Book.Contract.CancelBetExpired(&_Book.TransactOpts, betID)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookTransactor) CancelBetModerator(opts *bind.TransactOpts, betID string, feeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetModerator", betID, feeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookSession) CancelBetModerator(betID string, feeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetModerator(&_Book.TransactOpts, betID, feeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 feeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookTransactorSession) CancelBetModerator(betID string, feeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetModerator(&_Book.TransactOpts, betID, feeWei, nonce, signature)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeWei) returns()
func (_Book *BookTransactor) CancelBetOwner(opts *bind.TransactOpts, betID string, feeWei *big.Int) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetOwner", betID, feeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeWei) returns()
func (_Book *BookSession) CancelBetOwner(betID string, feeWei *big.Int) (*types.Transaction, error) {
	return _Book.Contract.CancelBetOwner(&_Book.TransactOpts, betID, feeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 feeWei) returns()
func (_Book *BookTransactorSession) CancelBetOwner(betID string, feeWei *big.Int) (*types.Transaction, error) {
	return _Book.Contract.CancelBetOwner(&_Book.TransactOpts, betID, feeWei)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactor) CancelBetParticipants(opts *bind.TransactOpts, betID string, feeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetParticipants", betID, feeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookSession) CancelBetParticipants(betID string, feeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetParticipants(&_Book.TransactOpts, betID, feeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 feeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactorSession) CancelBetParticipants(betID string, feeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetParticipants(&_Book.TransactOpts, betID, feeWei, nonces, signatures)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookSession) Deposit() (*types.Transaction, error) {
	return _Book.Contract.Deposit(&_Book.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookTransactorSession) Deposit() (*types.Transaction, error) {
	return _Book.Contract.Deposit(&_Book.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookTransactor) Drain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Drain")
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookSession) Drain() (*types.Transaction, error) {
	return _Book.Contract.Drain(&_Book.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookTransactorSession) Drain() (*types.Transaction, error) {
	return _Book.Contract.Drain(&_Book.TransactOpts)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactor) PlaceBet(opts *bind.TransactOpts, betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "PlaceBet", betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookSession) PlaceBet(betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.PlaceBet(&_Book.TransactOpts, betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactorSession) PlaceBet(betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.PlaceBet(&_Book.TransactOpts, betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookTransactor) ReconcileBet(opts *bind.TransactOpts, betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "ReconcileBet", betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.Contract.ReconcileBet(&_Book.TransactOpts, betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookTransactorSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.Contract.ReconcileBet(&_Book.TransactOpts, betID, nonce, signature, winners)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookSession) Withdraw() (*types.Transaction, error) {
	return _Book.Contract.Withdraw(&_Book.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Book.Contract.Withdraw(&_Book.TransactOpts)
}

// BookEventLogIterator is returned from FilterEventLog and is used to iterate over the raw logs and unpacked data for EventLog events raised by the Book contract.
type BookEventLogIterator struct {
	Event *BookEventLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BookEventLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BookEventLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BookEventLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BookEventLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BookEventLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BookEventLog represents a EventLog event raised by the Book contract.
type BookEventLog struct {
	Value string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEventLog is a free log retrieval operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) FilterEventLog(opts *bind.FilterOpts) (*BookEventLogIterator, error) {

	logs, sub, err := _Book.contract.FilterLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return &BookEventLogIterator{contract: _Book.contract, event: "EventLog", logs: logs, sub: sub}, nil
}

// WatchEventLog is a free log subscription operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) WatchEventLog(opts *bind.WatchOpts, sink chan<- *BookEventLog) (event.Subscription, error) {

	logs, sub, err := _Book.contract.WatchLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BookEventLog)
				if err := _Book.contract.UnpackLog(event, "EventLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventLog is a log parse operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) ParseEventLog(log types.Log) (*BookEventLog, error) {
	event := new(BookEventLog)
	if err := _Book.contract.UnpackLog(event, "EventLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
